{"version":3,"sources":["/home/circleci/project/packages/editor/src/components/block-settings-menu/reusable-block-convert-button.js"],"names":["ReusableBlockConvertButton","isVisible","isStaticBlock","onConvertToStatic","onConvertToReusable","select","clientIds","getBlocksByClientId","canInsertBlockType","getReusableBlock","__experimentalGetReusableBlock","blocks","block","isValid","name","length","attributes","ref","dispatch","onToggle","noop","convertBlockToReusable","__experimentalConvertBlockToReusable","convertBlockToStatic","__experimentalConvertBlockToStatic"],"mappings":";;;;;;;;AAQA;;AALA;;AAMA;;AACA;;AACA;;AACA;;AACA;;AAbA;;;;AAKA;;;AAUO,SAASA,0BAAT,OAKH;AAAA,MAJHC,SAIG,QAJHA,SAIG;AAAA,MAHHC,aAGG,QAHHA,aAGG;AAAA,MAFHC,iBAEG,QAFHA,iBAEG;AAAA,MADHC,mBACG,QADHA,mBACG;;AACH,MAAK,CAAEH,SAAP,EAAmB;AAClB,WAAO,IAAP;AACA;;AAED,SACC,4BAAC,iBAAD,QACGC,aAAa,IACd,4BAAC,oBAAD;AACC,IAAA,SAAS,EAAC,qCADX;AAEC,IAAA,IAAI,EAAC,iBAFN;AAGC,IAAA,OAAO,EAAGE;AAHX,KAKG,cAAI,wBAAJ,CALH,CAFF,EAUG,CAAEF,aAAF,IACD,4BAAC,oBAAD;AACC,IAAA,SAAS,EAAC,qCADX;AAEC,IAAA,IAAI,EAAC,iBAFN;AAGC,IAAA,OAAO,EAAGC;AAHX,KAKG,cAAI,0BAAJ,CALH,CAXF,CADD;AAsBA;;eAEc,sBAAS,CACvB,sBAAY,UAAEE,MAAF,SAA6B;AAAA,MAAjBC,SAAiB,SAAjBA,SAAiB;;AAAA,gBAKpCD,MAAM,CAAE,aAAF,CAL8B;AAAA,MAEvCE,mBAFuC,WAEvCA,mBAFuC;AAAA,MAGvCC,kBAHuC,WAGvCA,kBAHuC;AAAA,MAIPC,gBAJO,WAIvCC,8BAJuC;;AAOxC,MAAMC,MAAM,GAAGJ,mBAAmB,CAAED,SAAF,CAAlC;AAEA,MAAML,SAAS,GACd;AACA;AACAO,EAAAA,kBAAkB,CAAE,YAAF,CAAlB,IAEA,mBAAOG,MAAP,EAAe,UAAEC,KAAF;AAAA,WACd;AACA;AACA,OAAC,CAAEA,KAAH,IACA;AACAA,MAAAA,KAAK,CAACC,OAFN,IAGA;AACA,mCAAiBD,KAAK,CAACE,IAAvB,EAA6B,UAA7B,EAAyC,IAAzC;AAPc;AAAA,GAAf,CALD;AAgBA,SAAO;AACNb,IAAAA,SAAS,EAATA,SADM;AAENC,IAAAA,aAAa,EAAED,SAAS,KACvBU,MAAM,CAACI,MAAP,KAAkB,CAAlB,IACA,CAAE,6BAAiBJ,MAAM,CAAE,CAAF,CAAvB,CADF,IAEA,CAAEF,gBAAgB,CAAEE,MAAM,CAAE,CAAF,CAAN,CAAYK,UAAZ,CAAuBC,GAAzB,CAHK;AAFlB,GAAP;AAQA,CAjCD,CADuB,EAmCvB,wBAAc,UAAEC,QAAF,SAAgD;AAAA,MAAlCZ,SAAkC,SAAlCA,SAAkC;AAAA,6BAAvBa,QAAuB;AAAA,MAAvBA,QAAuB,+BAAZC,YAAY;;AAAA,kBAIzDF,QAAQ,CAAE,aAAF,CAJiD;AAAA,MAEtBG,sBAFsB,aAE5DC,oCAF4D;AAAA,MAGxBC,oBAHwB,aAG5DC,kCAH4D;;AAM7D,SAAO;AACNrB,IAAAA,iBADM,+BACc;AACnB,UAAKG,SAAS,CAACS,MAAV,KAAqB,CAA1B,EAA8B;AAC7B;AACA;;AACDQ,MAAAA,oBAAoB,CAAEjB,SAAS,CAAE,CAAF,CAAX,CAApB;AACAa,MAAAA,QAAQ;AACR,KAPK;AAQNf,IAAAA,mBARM,iCAQgB;AACrBiB,MAAAA,sBAAsB,CAAEf,SAAF,CAAtB;AACAa,MAAAA,QAAQ;AACR;AAXK,GAAP;AAaA,CAnBD,CAnCuB,CAAT,EAuDVnB,0BAvDU,C","sourcesContent":["/**\n * External dependencies\n */\nimport { noop, every } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { Fragment } from '@wordpress/element';\nimport { MenuItem } from '@wordpress/components';\nimport { __ } from '@wordpress/i18n';\nimport { hasBlockSupport, isReusableBlock } from '@wordpress/blocks';\nimport { withSelect, withDispatch } from '@wordpress/data';\nimport { compose } from '@wordpress/compose';\n\nexport function ReusableBlockConvertButton( {\n\tisVisible,\n\tisStaticBlock,\n\tonConvertToStatic,\n\tonConvertToReusable,\n} ) {\n\tif ( ! isVisible ) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<Fragment>\n\t\t\t{ isStaticBlock && (\n\t\t\t\t<MenuItem\n\t\t\t\t\tclassName=\"editor-block-settings-menu__control\"\n\t\t\t\t\ticon=\"controls-repeat\"\n\t\t\t\t\tonClick={ onConvertToReusable }\n\t\t\t\t>\n\t\t\t\t\t{ __( 'Add to Reusable Blocks' ) }\n\t\t\t\t</MenuItem>\n\t\t\t) }\n\t\t\t{ ! isStaticBlock && (\n\t\t\t\t<MenuItem\n\t\t\t\t\tclassName=\"editor-block-settings-menu__control\"\n\t\t\t\t\ticon=\"controls-repeat\"\n\t\t\t\t\tonClick={ onConvertToStatic }\n\t\t\t\t>\n\t\t\t\t\t{ __( 'Convert to Regular Block' ) }\n\t\t\t\t</MenuItem>\n\t\t\t) }\n\t\t</Fragment>\n\t);\n}\n\nexport default compose( [\n\twithSelect( ( select, { clientIds } ) => {\n\t\tconst {\n\t\t\tgetBlocksByClientId,\n\t\t\tcanInsertBlockType,\n\t\t\t__experimentalGetReusableBlock: getReusableBlock,\n\t\t} = select( 'core/editor' );\n\n\t\tconst blocks = getBlocksByClientId( clientIds );\n\n\t\tconst isVisible = (\n\t\t\t// Hide 'Add to Reusable Blocks' when Reusable Blocks are disabled, i.e. when\n\t\t\t// core/block is not in the allowed_block_types filter.\n\t\t\tcanInsertBlockType( 'core/block' ) &&\n\n\t\t\tevery( blocks, ( block ) => (\n\t\t\t\t// Guard against the case where a regular block has *just* been converted to a\n\t\t\t\t// reusable block and doesn't yet exist in the editor store.\n\t\t\t\t!! block &&\n\t\t\t\t// Only show the option to covert to reusable blocks on valid blocks.\n\t\t\t\tblock.isValid &&\n\t\t\t\t// Make sure the block supports being converted into a reusable block (by default that is the case).\n\t\t\t\thasBlockSupport( block.name, 'reusable', true )\n\t\t\t) )\n\t\t);\n\n\t\treturn {\n\t\t\tisVisible,\n\t\t\tisStaticBlock: isVisible && (\n\t\t\t\tblocks.length !== 1 ||\n\t\t\t\t! isReusableBlock( blocks[ 0 ] ) ||\n\t\t\t\t! getReusableBlock( blocks[ 0 ].attributes.ref )\n\t\t\t),\n\t\t};\n\t} ),\n\twithDispatch( ( dispatch, { clientIds, onToggle = noop } ) => {\n\t\tconst {\n\t\t\t__experimentalConvertBlockToReusable: convertBlockToReusable,\n\t\t\t__experimentalConvertBlockToStatic: convertBlockToStatic,\n\t\t} = dispatch( 'core/editor' );\n\n\t\treturn {\n\t\t\tonConvertToStatic() {\n\t\t\t\tif ( clientIds.length !== 1 ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconvertBlockToStatic( clientIds[ 0 ] );\n\t\t\t\tonToggle();\n\t\t\t},\n\t\t\tonConvertToReusable() {\n\t\t\t\tconvertBlockToReusable( clientIds );\n\t\t\t\tonToggle();\n\t\t\t},\n\t\t};\n\t} ),\n] )( ReusableBlockConvertButton );\n"]}