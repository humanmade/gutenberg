{"version":3,"sources":["/home/circleci/project/packages/editor/src/components/rich-text/index.js"],"names":["window","getSelection","RichText","value","onReplace","multiline","arguments","multilineTag","multilineWrapperTags","onInit","bind","getSettings","onSetup","onFocus","onChange","onNodeChange","onDeleteKeyDown","onKeyDown","onKeyUp","onPropagateUndo","onPaste","onCreateUndoLevel","setFocusedElement","onInput","onSelectionChange","getRecord","createRecord","applyRecord","isEmpty","valueToFormat","setRef","isActive","formatToValue","size","savedContent","patterns","enterPatterns","filter","type","trigger","state","usedDeprecatedChildrenSource","Array","isArray","document","addEventListener","removeEventListener","node","editableRef","activeElement","settings","forced_root_block","custom_undo_redo_levels","unstableGetSettings","props","editor","on","unstableOnSetup","instanceId","shortcuts","add","rawShortcut","primary","primaryShift","remove","event","onUndo","onRedo","command","preventDefault","formats","text","start","end","range","getRangeAt","element","removeNode","getAttribute","unwrapNode","removeAttribute","attribute","indexOf","filterString","string","replace","TINYMCE_ZWSP","prepareEditableTree","record","current","createLinePadding","doc","createElement","setAttribute","clipboardData","items","files","item","test","plainText","html","getData","error1","error2","console","log","file","getAsFile","content","HTML","mode","tagName","shouldReplace","setTimeout","onSplit","splitContent","selection","isCollapsed","pastedText","trim","attributes","href","canUserUseUnfilteredHTML","recordToInsert","length","paste","unstableOnFocus","transformed","reduce","accumlator","transform","isCaretWithinFormattedText","onEnterFormattedText","onExitFormattedText","setState","_withoutApply","lastLevel","originalEvent","onMerge","onRemove","keyCode","isReverse","BACKSPACE","empty","isEdge","DELETE","newValue","LINE_SEPARATOR","ENTER","transformation","regExp","map","shiftKey","toInsert","charAt","isViewportSmall","scrollToRect","getRng","rect","caretTop","top","container","graceOffset","epsilon","delta","Math","abs","scrollTo","scrollLeft","scrollTop","blocks","context","before","after","parents","selectedAnchor","getBoundingClientRect","prevProps","isSelected","prevRecord","shouldReapply","Object","keys","some","name","subName","children","toHTML","format","body","innerHTML","fromDOM","childNodes","Tagname","style","wrapperClassName","className","inlineToolbar","formattingControls","placeholder","keepPlaceholderOnFocus","autocompleters","MultilineTag","ariaProps","key","join","isPlaceholderVisible","classes","isExpanded","listBoxId","activeId","valueToEditableHTML","Component","defaultProps","RichTextContainer","withInstanceId","ownProps","clientId","focusedElement","select","isViewportMatch","dispatch","createUndoLevel","redo","undo","enterFormattedText","exitFormattedText","withSafeTimeout","Content","Tag"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;AAbA;;AACA;;AAOA;;AAMA;;AAKA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAmBA;;AACA;;AAKA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AA8+BA;;AACA;;AACA;;AA5iCA;;;;AAaA;;;;AAqCA;;;;AAYA;;;cAIyBA,M;IAAjBC,Y,WAAAA,Y;;IAEKC,Q;;;;;AACZ,0BAA+C;AAAA;;AAAA,QAAhCC,KAAgC,QAAhCA,KAAgC;AAAA,QAAzBC,SAAyB,QAAzBA,SAAyB;AAAA,QAAdC,SAAc,QAAdA,SAAc;AAAA;AAC9C,+GAAUC,SAAV;;AAEA,QAAKD,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,GAApC,IAA2CA,SAAS,KAAK,IAA9D,EAAqE;AACpE,YAAKE,YAAL,GAAoBF,SAAS,KAAK,IAAd,GAAqB,GAArB,GAA2BA,SAA/C;AACA;;AAED,QAAK,MAAKE,YAAL,KAAsB,IAA3B,EAAkC;AACjC,YAAKC,oBAAL,GAA4B,CAAE,IAAF,EAAQ,IAAR,CAA5B;AACA;;AAED,UAAKC,MAAL,GAAc,MAAKA,MAAL,CAAYC,IAAZ,mFAAd;AACA,UAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBD,IAAjB,mFAAnB;AACA,UAAKE,OAAL,GAAe,MAAKA,OAAL,CAAaF,IAAb,mFAAf;AACA,UAAKG,OAAL,GAAe,MAAKA,OAAL,CAAaH,IAAb,mFAAf;AACA,UAAKI,QAAL,GAAgB,MAAKA,QAAL,CAAcJ,IAAd,mFAAhB;AACA,UAAKK,YAAL,GAAoB,MAAKA,YAAL,CAAkBL,IAAlB,mFAApB;AACA,UAAKM,eAAL,GAAuB,MAAKA,eAAL,CAAqBN,IAArB,mFAAvB;AACA,UAAKO,SAAL,GAAiB,MAAKA,SAAL,CAAeP,IAAf,mFAAjB;AACA,UAAKQ,OAAL,GAAe,MAAKA,OAAL,CAAaR,IAAb,mFAAf;AACA,UAAKS,eAAL,GAAuB,MAAKA,eAAL,CAAqBT,IAArB,mFAAvB;AACA,UAAKU,OAAL,GAAe,MAAKA,OAAL,CAAaV,IAAb,mFAAf;AACA,UAAKW,iBAAL,GAAyB,MAAKA,iBAAL,CAAuBX,IAAvB,mFAAzB;AACA,UAAKY,iBAAL,GAAyB,MAAKA,iBAAL,CAAuBZ,IAAvB,mFAAzB;AACA,UAAKa,OAAL,GAAe,MAAKA,OAAL,CAAab,IAAb,mFAAf;AACA,UAAKc,iBAAL,GAAyB,MAAKA,iBAAL,CAAuBd,IAAvB,mFAAzB;AACA,UAAKe,SAAL,GAAiB,MAAKA,SAAL,CAAef,IAAf,mFAAjB;AACA,UAAKgB,YAAL,GAAoB,MAAKA,YAAL,CAAkBhB,IAAlB,mFAApB;AACA,UAAKiB,WAAL,GAAmB,MAAKA,WAAL,CAAiBjB,IAAjB,mFAAnB;AACA,UAAKkB,OAAL,GAAe,MAAKA,OAAL,CAAalB,IAAb,mFAAf;AACA,UAAKmB,aAAL,GAAqB,MAAKA,aAAL,CAAmBnB,IAAnB,mFAArB;AACA,UAAKoB,MAAL,GAAc,MAAKA,MAAL,CAAYpB,IAAZ,mFAAd;AACA,UAAKqB,QAAL,GAAgB,MAAKA,QAAL,CAAcrB,IAAd,mFAAhB;AAEA,UAAKsB,aAAL,GAAqB,qBAAQ,MAAKA,aAAL,CAAmBtB,IAAnB,mFAAR,EAAyC;AAAEuB,MAAAA,IAAI,EAAE;AAAR,KAAzC,CAArB;AAEA,UAAKC,YAAL,GAAoB/B,KAApB;AACA,UAAKgC,QAAL,GAAgB,2BAAa;AAC5B/B,MAAAA,SAAS,EAATA,SAD4B;AAE5BG,MAAAA,YAAY,EAAE,MAAKA,YAFS;AAG5BsB,MAAAA,aAAa,EAAE,MAAKA;AAHQ,KAAb,CAAhB;AAKA,UAAKO,aAAL,GAAqB,gCAAoB,MAApB,EAA6BC,MAA7B,CAAqC;AAAA,UAAIC,IAAJ,SAAIA,IAAJ;AAAA,UAAUC,OAAV,SAAUA,OAAV;AAAA,aACzDD,IAAI,KAAK,SAAT,IAAsBC,OAAO,KAAK,OADuB;AAAA,KAArC,CAArB;AAIA,UAAKC,KAAL,GAAa,EAAb;AAEA,UAAKC,4BAAL,GAAoCC,KAAK,CAACC,OAAN,CAAexC,KAAf,CAApC;AAhD8C;AAiD9C;;;;wCAEmB;AACnByC,MAAAA,QAAQ,CAACC,gBAAT,CAA2B,iBAA3B,EAA8C,KAAKrB,iBAAnD;AACA;;;2CAEsB;AACtBoB,MAAAA,QAAQ,CAACE,mBAAT,CAA8B,iBAA9B,EAAiD,KAAKtB,iBAAtD;AACA;;;2BAEOuB,I,EAAO;AACd,WAAKC,WAAL,GAAmBD,IAAnB;AACA;;;+BAEU;AACV,aAAO,KAAKC,WAAL,KAAqBJ,QAAQ,CAACK,aAArC;AACA;AAED;;;;;;;;;;;gCAQaC,Q,EAAW;AACvBA,MAAAA,QAAQ,mCACJA,QADI;AAEPC,QAAAA,iBAAiB,EAAE,KAAK5C,YAAL,IAAqB,KAFjC;AAGP;AACA;AACA6C,QAAAA,uBAAuB,EAAE;AALlB,QAAR;AADuB,UASfC,mBATe,GASS,KAAKC,KATd,CASfD,mBATe;;AAUvB,UAAKA,mBAAL,EAA2B;AAC1BH,QAAAA,QAAQ,GAAGG,mBAAmB,CAAEH,QAAF,CAA9B;AACA;;AAED,aAAOA,QAAP;AACA;AAED;;;;;;;;;;;4BAQSK,M,EAAS;AACjB,WAAKA,MAAL,GAAcA,MAAd;AAEAA,MAAAA,MAAM,CAACC,EAAP,CAAW,MAAX,EAAmB,KAAK/C,MAAxB;AACA8C,MAAAA,MAAM,CAACC,EAAP,CAAW,YAAX,EAAyB,KAAKzC,YAA9B;AACAwC,MAAAA,MAAM,CAACC,EAAP,CAAW,mBAAX,EAAgC,KAAKrC,eAArC,EALiB,CAMjB;;AACAoC,MAAAA,MAAM,CAACC,EAAP,CAAW,QAAX,EAAqB,KAAKnC,iBAA1B;AAPiB,UASToC,eATS,GASW,KAAKH,KAThB,CASTG,eATS;;AAUjB,UAAKA,eAAL,EAAuB;AACtBA,QAAAA,eAAe,CAAEF,MAAF,CAAf;AACA;AACD;;;wCAEmB;AACnB,UAAK,KAAKD,KAAL,CAAWhC,iBAAhB,EAAoC;AACnC,aAAKgC,KAAL,CAAWhC,iBAAX,CAA8B,KAAKgC,KAAL,CAAWI,UAAzC;AACA;AACD;;;6BAEQ;AACR,WAAKH,MAAL,CAAYI,SAAZ,CAAsBC,GAAtB,CAA2BC,sBAAYC,OAAZ,CAAqB,GAArB,CAA3B,EAAuD,EAAvD,EAA2D,MAA3D;AACA,WAAKP,MAAL,CAAYI,SAAZ,CAAsBC,GAAtB,CAA2BC,sBAAYE,YAAZ,CAA0B,GAA1B,CAA3B,EAA4D,EAA5D,EAAgE,MAAhE,EAFQ,CAIR;AACA;;AACA,WAAKR,MAAL,CAAYI,SAAZ,CAAsBK,MAAtB,CAA8B,QAA9B,EAAwC,EAAxC,EAA4C,MAA5C;AACA;AAED;;;;;;;;oCAKiBC,K,EAAQ;AAAA,wBACG,KAAKX,KADR;AAAA,UAChBY,MADgB,eAChBA,MADgB;AAAA,UACRC,MADQ,eACRA,MADQ;AAAA,UAEhBC,OAFgB,GAEJH,KAFI,CAEhBG,OAFgB;;AAIxB,UAAKA,OAAO,KAAK,MAAZ,IAAsBF,MAA3B,EAAoC;AACnC,2BAAOA,MAAP;AACAD,QAAAA,KAAK,CAACI,cAAN;AACA;;AAED,UAAKD,OAAO,KAAK,MAAZ,IAAsBD,MAA3B,EAAoC;AACnC,2BAAOA,MAAP;AACAF,QAAAA,KAAK,CAACI,cAAN;AACA;AACD;AAED;;;;;;;;gCAKY;AAAA,gCACe,KAAKrC,aAAL,CAAoB,KAAKsB,KAAL,CAAWnD,KAA/B,CADf;AAAA,UACHmE,OADG,uBACHA,OADG;AAAA,UACMC,IADN,uBACMA,IADN;;AAAA,wBAEY,KAAK/B,KAFjB;AAAA,UAEHgC,KAFG,eAEHA,KAFG;AAAA,UAEIC,GAFJ,eAEIA,GAFJ;AAIX,aAAO;AAAEH,QAAAA,OAAO,EAAPA,OAAF;AAAWC,QAAAA,IAAI,EAAJA,IAAX;AAAiBC,QAAAA,KAAK,EAALA,KAAjB;AAAwBC,QAAAA,GAAG,EAAHA;AAAxB,OAAP;AACA;;;mCAEc;AACd,UAAMC,KAAK,GAAGzE,YAAY,GAAG0E,UAAf,CAA2B,CAA3B,CAAd;AAEA,aAAO,sBAAQ;AACdC,QAAAA,OAAO,EAAE,KAAK5B,WADA;AAEd0B,QAAAA,KAAK,EAALA,KAFc;AAGdnE,QAAAA,YAAY,EAAE,KAAKA,YAHL;AAIdC,QAAAA,oBAAoB,EAAE,KAAKA,oBAJb;AAKdqE,QAAAA,UAAU,EAAE,oBAAE9B,IAAF;AAAA,iBAAYA,IAAI,CAAC+B,YAAL,CAAmB,gBAAnB,MAA0C,KAAtD;AAAA,SALE;AAMdC,QAAAA,UAAU,EAAE,oBAAEhC,IAAF;AAAA,iBAAY,CAAC,CAAEA,IAAI,CAAC+B,YAAL,CAAmB,gBAAnB,CAAf;AAAA,SANE;AAOdE,QAAAA,eAAe,EAAE,yBAAEC,SAAF;AAAA,iBAAiBA,SAAS,CAACC,OAAV,CAAmB,WAAnB,MAAqC,CAAtD;AAAA,SAPH;AAQdC,QAAAA,YAAY,EAAE,sBAAEC,MAAF;AAAA,iBAAcA,MAAM,CAACC,OAAP,CAAgBC,qBAAhB,EAA8B,EAA9B,CAAd;AAAA,SARA;AASdC,QAAAA,mBAAmB,EAAE,KAAKjC,KAAL,CAAWiC;AATlB,OAAR,CAAP;AAWA;;;gCAEYC,M,EAAS;AACrB,2BAAO;AACNrF,QAAAA,KAAK,EAAEqF,MADD;AAENC,QAAAA,OAAO,EAAE,KAAKzC,WAFR;AAGNzC,QAAAA,YAAY,EAAE,KAAKA,YAHb;AAINC,QAAAA,oBAAoB,EAAE,KAAKA,oBAJrB;AAKNkF,QAAAA,iBALM,6BAKaC,GALb,EAKmB;AACxB,cAAMf,OAAO,GAAGe,GAAG,CAACC,aAAJ,CAAmB,IAAnB,CAAhB;AACAhB,UAAAA,OAAO,CAACiB,YAAR,CAAsB,gBAAtB,EAAwC,GAAxC;AACA,iBAAOjB,OAAP;AACA,SATK;AAUNW,QAAAA,mBAAmB,EAAE,KAAKjC,KAAL,CAAWiC;AAV1B,OAAP;AAYA;;;8BAES;AACT,aAAO,uBAAS,KAAKvD,aAAL,CAAoB,KAAKsB,KAAL,CAAWnD,KAA/B,CAAT,CAAP;AACA;AAED;;;;;;;;;;4BAOS8D,K,EAAQ;AAAA;;AAChB,UAAM6B,aAAa,GAAG7B,KAAK,CAAC6B,aAA5B;AADgB,UAEVC,KAFU,GAEOD,aAFP,CAEVC,KAFU;AAAA,UAEHC,KAFG,GAEOF,aAFP,CAEHE,KAFG,EAIhB;AACA;;AACAD,MAAAA,KAAK,GAAG,mBAAOA,KAAP,IAAiB,EAAjB,GAAsBA,KAA9B;AACAC,MAAAA,KAAK,GAAG,mBAAOA,KAAP,IAAiB,EAAjB,GAAsBA,KAA9B;AAEA,UAAMC,IAAI,GAAG,mDAAWF,KAAX,0CAAqBC,KAArB,IAA8B;AAAA,YAAI1D,IAAJ,SAAIA,IAAJ;AAAA,eAAgB,6BAA6B4D,IAA7B,CAAmC5D,IAAnC,CAAhB;AAAA,OAA9B,CAAb;AACA,UAAI6D,SAAS,GAAG,EAAhB;AACA,UAAIC,IAAI,GAAG,EAAX,CAXgB,CAahB;AACA;AACA;;AACA,UAAI;AACHD,QAAAA,SAAS,GAAGL,aAAa,CAACO,OAAd,CAAuB,YAAvB,CAAZ;AACAD,QAAAA,IAAI,GAAGN,aAAa,CAACO,OAAd,CAAuB,WAAvB,CAAP;AACA,OAHD,CAGE,OAAQC,MAAR,EAAiB;AAClB,YAAI;AACHF,UAAAA,IAAI,GAAGN,aAAa,CAACO,OAAd,CAAuB,MAAvB,CAAP;AACA,SAFD,CAEE,OAAQE,MAAR,EAAiB;AAClB;AACA;AACA;AACA;AACA;AACD;;AAEDtC,MAAAA,KAAK,CAACI,cAAN,GA9BgB,CAgChB;;AACArE,MAAAA,MAAM,CAACwG,OAAP,CAAeC,GAAf,CAAoB,oBAApB,EAA0CL,IAA1C;AACApG,MAAAA,MAAM,CAACwG,OAAP,CAAeC,GAAf,CAAoB,0BAApB,EAAgDN,SAAhD,EAlCgB,CAoChB;AACA;;AACA,UAAKF,IAAI,IAAI,CAAEG,IAAf,EAAsB;AACrB,YAAMM,IAAI,GAAGT,IAAI,CAACU,SAAL,GAAiBV,IAAI,CAACU,SAAL,EAAjB,GAAoCV,IAAjD;;AACA,YAAMW,QAAO,GAAG,0BAAc;AAC7BC,UAAAA,IAAI,uBAAgB,yBAAeH,IAAf,CAAhB,QADyB;AAE7BI,UAAAA,IAAI,EAAE,QAFuB;AAG7BC,UAAAA,OAAO,EAAE,KAAKzD,KAAL,CAAWyD;AAHS,SAAd,CAAhB;;AAKA,YAAMC,cAAa,GAAG,KAAK1D,KAAL,CAAWlD,SAAX,IAAwB,KAAKwB,OAAL,EAA9C,CAPqB,CASrB;;;AACA5B,QAAAA,MAAM,CAACwG,OAAP,CAAeC,GAAf,CAAoB,oBAApB,EAA0CC,IAA1C;;AAEA,YAAKM,cAAL,EAAqB;AACpB;AACA,eAAK1D,KAAL,CAAW2D,UAAX,CAAuB;AAAA,mBAAM,MAAI,CAAC3D,KAAL,CAAWlD,SAAX,CAAsBwG,QAAtB,CAAN;AAAA,WAAvB;AACA,SAHD,MAGO,IAAK,KAAKtD,KAAL,CAAW4D,OAAhB,EAA0B;AAChC;AACA;AACA,eAAK5D,KAAL,CAAW2D,UAAX,CAAuB;AAAA,mBAAM,MAAI,CAACE,YAAL,CAAmBP,QAAnB,CAAN;AAAA,WAAvB;AACA;;AAED;AACA,OA5De,CA8DhB;;;AACA,UAAK,CAAE,KAAKrD,MAAL,CAAY6D,SAAZ,CAAsBC,WAAtB,EAAP,EAA6C;AAC5C,YAAMC,UAAU,GAAG,CAAElB,IAAI,IAAID,SAAV,EAAsBd,OAAtB,CAA+B,UAA/B,EAA2C,EAA3C,EAAgDkC,IAAhD,EAAnB,CAD4C,CAG5C;;AACA,YAAK,gBAAOD,UAAP,CAAL,EAA2B;AAC1B,eAAKxG,QAAL,CAAe,2BAAa,KAAKW,SAAL,EAAb,EAA+B;AAC7Ca,YAAAA,IAAI,EAAE,GADuC;AAE7CkF,YAAAA,UAAU,EAAE;AACXC,cAAAA,IAAI,EAAE,kCAAgBH,UAAhB;AADK;AAFiC,WAA/B,CAAf,EAD0B,CAQ1B;;AACAtH,UAAAA,MAAM,CAACwG,OAAP,CAAeC,GAAf,CAAoB,mBAApB,EAAyCa,UAAzC;AAEA;AACA;AACD;;AAED,UAAMN,aAAa,GAAG,KAAK1D,KAAL,CAAWlD,SAAX,IAAwB,KAAKwB,OAAL,EAA9C;AAEA,UAAIkF,IAAI,GAAG,QAAX;;AAEA,UAAKE,aAAL,EAAqB;AACpBF,QAAAA,IAAI,GAAG,QAAP;AACA,OAFD,MAEO,IAAK,KAAKxD,KAAL,CAAW4D,OAAhB,EAA0B;AAChCJ,QAAAA,IAAI,GAAG,MAAP;AACA;;AAED,UAAMF,OAAO,GAAG,0BAAc;AAC7BC,QAAAA,IAAI,EAAET,IADuB;AAE7BD,QAAAA,SAAS,EAATA,SAF6B;AAG7BW,QAAAA,IAAI,EAAJA,IAH6B;AAI7BC,QAAAA,OAAO,EAAE,KAAKzD,KAAL,CAAWyD,OAJS;AAK7BW,QAAAA,wBAAwB,EAAE,KAAKpE,KAAL,CAAWoE;AALR,OAAd,CAAhB;;AAQA,UAAK,OAAOd,OAAP,KAAmB,QAAxB,EAAmC;AAClC,YAAMe,cAAc,GAAG,sBAAQ;AAAEvB,UAAAA,IAAI,EAAEQ;AAAR,SAAR,CAAvB;AACA,aAAK9F,QAAL,CAAe,sBAAQ,KAAKW,SAAL,EAAR,EAA0BkG,cAA1B,CAAf;AACA,OAHD,MAGO,IAAK,KAAKrE,KAAL,CAAW4D,OAAhB,EAA0B;AAChC,YAAK,CAAEN,OAAO,CAACgB,MAAf,EAAwB;AACvB;AACA;;AAED,YAAKZ,aAAL,EAAqB;AACpB,eAAK1D,KAAL,CAAWlD,SAAX,CAAsBwG,OAAtB;AACA,SAFD,MAEO;AACN,eAAKO,YAAL,CAAmBP,OAAnB,EAA4B;AAAEiB,YAAAA,KAAK,EAAE;AAAT,WAA5B;AACA;AACD;AACD;AAED;;;;;;;;;;;;;;;;;;;;8BAiBU;AAAA,UACDC,eADC,GACmB,KAAKxE,KADxB,CACDwE,eADC;;AAET,UAAKA,eAAL,EAAuB;AACtBA,QAAAA,eAAe;AACf;AACD;AAED;;;;;;8BAGU;AACT,UAAMtC,MAAM,GAAG,KAAK9D,YAAL,EAAf;AACA,UAAMqG,WAAW,GAAG,KAAK5F,QAAL,CAAc6F,MAAd,CAAsB,UAAEC,UAAF,EAAcC,SAAd;AAAA,eAA6BA,SAAS,CAAED,UAAF,CAAtC;AAAA,OAAtB,EAA4EzC,MAA5E,CAApB;AAEA,WAAK1E,QAAL,CAAeiH,WAAf;AACA;AAED;;;;;;wCAGoB;AACnB;AACA,UAAK,CAAE,KAAKhG,QAAL,EAAP,EAAyB;AACxB;AACA;;AAJkB,+BAMa,KAAKL,YAAL,EANb;AAAA,UAMX8C,KANW,sBAMXA,KANW;AAAA,UAMJC,GANI,sBAMJA,GANI;AAAA,UAMCH,OAND,sBAMCA,OAND;;AAQnB,UAAKE,KAAK,KAAK,KAAKhC,KAAL,CAAWgC,KAArB,IAA8BC,GAAG,KAAK,KAAKjC,KAAL,CAAWiC,GAAtD,EAA4D;AAC3D,YAAM0D,0BAA0B,GAAG,KAAK7E,KAAL,CAAW6E,0BAA9C;;AACA,YAAK,CAAEA,0BAAF,IAAgC7D,OAAO,CAAEE,KAAF,CAA5C,EAAwD;AACvD,eAAKlB,KAAL,CAAW8E,oBAAX;AACA,SAFD,MAEO,IAAKD,0BAA0B,IAAI,CAAE7D,OAAO,CAAEE,KAAF,CAA5C,EAAwD;AAC9D,eAAKlB,KAAL,CAAW+E,mBAAX;AACA;;AAED,aAAKC,QAAL,CAAe;AAAE9D,UAAAA,KAAK,EAALA,KAAF;AAASC,UAAAA,GAAG,EAAHA;AAAT,SAAf;AACA;AACD;AAED;;;;;;;;;;;6BAQUe,M,EAAQ+C,a,EAAgB;AACjC,UAAK,CAAEA,aAAP,EAAuB;AACtB,aAAK5G,WAAL,CAAkB6D,MAAlB;AACA;;AAHgC,UAKzBhB,KALyB,GAKVgB,MALU,CAKzBhB,KALyB;AAAA,UAKlBC,GALkB,GAKVe,MALU,CAKlBf,GALkB;AAOjC,WAAKvC,YAAL,GAAoB,KAAKL,aAAL,CAAoB2D,MAApB,CAApB;AACA,WAAKlC,KAAL,CAAWxC,QAAX,CAAqB,KAAKoB,YAA1B;AACA,WAAKoG,QAAL,CAAe;AAAE9D,QAAAA,KAAK,EAALA,KAAF;AAASC,QAAAA,GAAG,EAAHA;AAAT,OAAf;AACA;;;sCAEkBR,K,EAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,UAAKA,KAAK,IAAIA,KAAK,CAACuE,SAAN,KAAoB,IAAlC,EAAyC;AACxC;AACA,OATyB,CAW1B;AACA;AACA;AACA;;;AACA,UAAK,CAAEvE,KAAF,IAAW,CAAEA,KAAK,CAACwE,aAAnB,IAAoCxE,KAAK,CAACwE,aAAN,CAAoBnG,IAApB,KAA6B,MAAtE,EAA+E;AAC9E,aAAKxB,QAAL,CAAe,KAAKY,YAAL,EAAf,EAAoC,IAApC;AACA;;AAED,WAAK4B,KAAL,CAAWjC,iBAAX;AACA;AAED;;;;;;;;;;;;oCASiB4C,K,EAAQ;AAAA,yBACM,KAAKX,KADX;AAAA,UAChBoF,OADgB,gBAChBA,OADgB;AAAA,UACPC,QADO,gBACPA,QADO;;AAExB,UAAK,CAAED,OAAF,IAAa,CAAEC,QAApB,EAA+B;AAC9B;AACA;;AAJuB,UAMhBC,OANgB,GAMJ3E,KANI,CAMhB2E,OANgB;AAOxB,UAAMC,SAAS,GAAGD,OAAO,KAAKE,mBAA9B,CAPwB,CASxB;;AACA,UAAK,CAAE,2BAAa,KAAKpH,YAAL,EAAb,CAAP,EAA4C;AAC3C;AACA;;AAED,UAAMqH,KAAK,GAAG,KAAKnH,OAAL,EAAd,CAdwB,CAgBxB;AACA;AACA;AACA;;AACA,UAAMoH,MAAM,GAAKD,KAAK,IAAI,2BAAkB,KAAK/F,WAAvB,EAAoC6F,SAApC,CAA1B;;AAEA,UAAK,CAAEG,MAAP,EAAgB;AACf;AACA;;AAED,UAAKN,OAAL,EAAe;AACdA,QAAAA,OAAO,CAAE,CAAEG,SAAJ,CAAP;AACA,OA5BuB,CA8BxB;AACA;AACA;AACA;;;AACA,UAAKF,QAAQ,IAAII,KAAZ,IAAqBF,SAA1B,EAAsC;AACrCF,QAAAA,QAAQ,CAAE,CAAEE,SAAJ,CAAR;AACA;;AAED5E,MAAAA,KAAK,CAACI,cAAN;AACA;AAED;;;;;;;;8BAKWJ,K,EAAQ;AAAA,UACV2E,OADU,GACE3E,KADF,CACV2E,OADU;;AAGlB,UAAKA,OAAO,KAAKK,gBAAZ,IAAsBL,OAAO,KAAKE,mBAAvC,EAAmD;AAClD,YAAM3I,KAAK,GAAG,KAAKuB,YAAL,EAAd;AACA,YAAM8C,KAAK,GAAG,iCAAmBrE,KAAnB,CAAd;AACA,YAAMsE,GAAG,GAAG,+BAAiBtE,KAAjB,CAAZ,CAHkD,CAKlD;;AACA,YAAK,CAAE,2BAAaA,KAAb,CAAP,EAA8B;AAC7B,eAAKW,QAAL,CAAe,sBAAQX,KAAR,CAAf;AACA8D,UAAAA,KAAK,CAACI,cAAN;AACA;AACA;;AAED,YAAK,KAAK9D,YAAV,EAAyB;AACxB,cAAI2I,QAAJ;;AAEA,cAAKN,OAAO,KAAKE,mBAAjB,EAA6B;AAC5B,gBAAK,sBAAQ3I,KAAR,EAAeqE,KAAK,GAAG,CAAvB,MAA+B2E,wBAApC,EAAqD;AACpDD,cAAAA,QAAQ,GAAG,sBACV/I,KADU,EAEV;AACA;AACA,yCAAaA,KAAb,IAAuBqE,KAAK,GAAG,CAA/B,GAAmCA,KAJzB,EAKVC,GALU,CAAX;AAOA;AACD,WAVD,MAUO,IAAK,sBAAQtE,KAAR,EAAesE,GAAf,MAAyB0E,wBAA9B,EAA+C;AACrDD,YAAAA,QAAQ,GAAG,sBACV/I,KADU,EAEVqE,KAFU,EAGV;AACA,uCAAarE,KAAb,IAAuBsE,GAAG,GAAG,CAA7B,GAAiCA,GAJvB,CAAX;AAMA;;AAED,cAAKyE,QAAL,EAAgB;AACf,iBAAKpI,QAAL,CAAeoI,QAAf;AACAjF,YAAAA,KAAK,CAACI,cAAN;AACA;AACD;;AAED,aAAKrD,eAAL,CAAsBiD,KAAtB;AACA,OAzCD,MAyCO,IAAK2E,OAAO,KAAKQ,eAAjB,EAAyB;AAC/BnF,QAAAA,KAAK,CAACI,cAAN;AAEA,YAAMmB,MAAM,GAAG,KAAK9D,YAAL,EAAf;;AAEA,YAAK,KAAK4B,KAAL,CAAWlD,SAAhB,EAA4B;AAC3B,cAAMmE,IAAI,GAAG,8BAAgBiB,MAAhB,CAAb;AACA,cAAM6D,cAAc,GAAG,2BAAe,KAAKjH,aAApB,EAAmC,UAAE6D,IAAF,EAAY;AACrE,mBAAOA,IAAI,CAACqD,MAAL,CAAYpD,IAAZ,CAAkB3B,IAAlB,CAAP;AACA,WAFsB,CAAvB;;AAIA,cAAK8E,cAAL,EAAsB;AACrB,iBAAK/F,KAAL,CAAWlD,SAAX,CAAsB,CACrBiJ,cAAc,CAACnB,SAAf,CAA0B;AAAEtB,cAAAA,OAAO,EAAErC;AAAX,aAA1B,CADqB,CAAtB;AAGA;AACA;AACD;;AAED,YAAK,KAAKhE,YAAV,EAAyB;AACxB,cAAK,KAAK+C,KAAL,CAAW4D,OAAX,IAAsB,2BAAa1B,MAAb,CAA3B,EAAmD;AAAA;;AAClD,iCAAKlC,KAAL,EAAW4D,OAAX,sDAAuB,qBAAO1B,MAAP,EAAgB+D,GAAhB,CAAqB,KAAK1H,aAA1B,CAAvB;AACA,WAFD,MAEO;AACN,iBAAKf,QAAL,CAAe,mCAAqB0E,MAArB,CAAf;AACA;AACD,SAND,MAMO,IAAKvB,KAAK,CAACuF,QAAN,IAAkB,CAAE,KAAKlG,KAAL,CAAW4D,OAApC,EAA8C;AACpD,cAAM3C,KAAI,GAAG,8BAAgBiB,MAAhB,CAAb;;AACA,cAAMoC,MAAM,GAAGrD,KAAI,CAACqD,MAApB;AACA,cAAI6B,QAAQ,GAAG,IAAf,CAHoD,CAKpD;AACA;AACA;AACA;;AACA,cAAKjE,MAAM,CAACf,GAAP,KAAemD,MAAf,KACJrD,KAAI,CAACmF,MAAL,CAAa9B,MAAM,GAAG,CAAtB,MAA8B,IAA9B,IAAsCA,MAAM,KAAK,CAD7C,CAAL,EAEI;AACH6B,YAAAA,QAAQ,GAAG,MAAX;AACA;;AAED,eAAK3I,QAAL,CAAe,sBAAQ0E,MAAR,EAAgBiE,QAAhB,CAAf;AACA,SAhBM,MAgBA;AACN,eAAKtC,YAAL;AACA;AACD;AACD;AAED;;;;;;;;;mCAMuB;AAAA,UAAZyB,OAAY,SAAZA,OAAY;;AACtB;AACA;AACA,UAAKA,OAAO,KAAKE,mBAAjB,EAA6B;AAC5B,aAAKhI,QAAL,CAAe,KAAKY,YAAL,EAAf,EAAoC,IAApC;AACA,OALqB,CAOtB;AACA;AACA;AACA;;;AACA,UAAK,KAAK4B,KAAL,CAAWqG,eAAX,IAA8Bf,OAAO,KAAKE,mBAA1C,IAAuDF,OAAO,KAAKQ,eAAxE,EAAgF;AAC/E,aAAKQ,YAAL,CAAmB,gCAAuB,KAAKrG,MAAL,CAAY6D,SAAZ,CAAsByC,MAAtB,EAAvB,CAAnB;AACA;AACD;;;iCAEaC,I,EAAO;AAAA,UACPC,QADO,GACMD,IADN,CACZE,GADY;AAEpB,UAAMC,SAAS,GAAG,6BAAoB,KAAKjH,WAAzB,CAAlB;;AAEA,UAAK,CAAEiH,SAAP,EAAmB;AAClB;AACA,OANmB,CAQpB;AACA;AACA;;;AACA,UAAMC,WAAW,GAAG,GAApB,CAXoB,CAapB;AACA;;AACA,UAAMC,OAAO,GAAG,EAAhB;AACA,UAAMC,KAAK,GAAGL,QAAQ,GAAGG,WAAzB;;AAEA,UAAKG,IAAI,CAACC,GAAL,CAAUF,KAAV,IAAoBD,OAAzB,EAAmC;AAClCF,QAAAA,SAAS,CAACM,QAAV,CACCN,SAAS,CAACO,UADX,EAECP,SAAS,CAACQ,SAAV,GAAsBL,KAFvB;AAIA;AACD;AAED;;;;;;;;;;;;;mCAU0C;AAAA,UAA5BM,MAA4B,uEAAnB,EAAmB;AAAA,UAAfC,OAAe,uEAAL,EAAK;AAAA,UACjCzD,OADiC,GACrB,KAAK5D,KADgB,CACjC4D,OADiC;AAEzC,UAAM1B,MAAM,GAAG,KAAK9D,YAAL,EAAf;;AAEA,UAAK,CAAEwF,OAAP,EAAiB;AAChB;AACA;;AANwC,mBAQjB,qBAAO1B,MAAP,CARiB;AAAA;AAAA,UAQnCoF,MARmC;AAAA,UAQ3BC,KAR2B,eAUzC;AACA;AACA;AACA;AACA;;;AACA,UAAK,uBAASA,KAAT,CAAL,EAAwB;AACvBD,QAAAA,MAAM,GAAGpF,MAAT;AACA,OAFD,MAEO,IAAK,uBAASoF,MAAT,CAAL,EAAyB;AAC/BC,QAAAA,KAAK,GAAGrF,MAAR;AACA,OAnBwC,CAqBzC;AACA;;;AACA,UAAKmF,OAAO,CAAC9C,KAAb,EAAqB;AACpB+C,QAAAA,MAAM,GAAG,uBAASA,MAAT,IAAoB,IAApB,GAA2BA,MAApC;AACAC,QAAAA,KAAK,GAAG,uBAASA,KAAT,IAAmB,IAAnB,GAA0BA,KAAlC;AACA;;AAED,UAAKD,MAAL,EAAc;AACbA,QAAAA,MAAM,GAAG,KAAK/I,aAAL,CAAoB+I,MAApB,CAAT;AACA;;AAED,UAAKC,KAAL,EAAa;AACZA,QAAAA,KAAK,GAAG,KAAKhJ,aAAL,CAAoBgJ,KAApB,CAAR;AACA;;AAED3D,MAAAA,OAAO,MAAP,UAAS0D,MAAT,EAAiBC,KAAjB,0CAA2BH,MAA3B;AACA;;;wCAE2B;AAAA,UAAZI,OAAY,SAAZA,OAAY;;AAC3B,UAAK,CAAE,KAAK/I,QAAL,EAAP,EAAyB;AACxB;AACA;;AAED,UAAK,KAAKuB,KAAL,CAAWqG,eAAhB,EAAkC;AACjC,YAAIG,IAAJ;AACA,YAAMiB,cAAc,GAAG,kBAAMD,OAAN,EAAe,UAAE/H,IAAF;AAAA,iBAAYA,IAAI,CAACgE,OAAL,KAAiB,GAA7B;AAAA,SAAf,CAAvB;;AACA,YAAKgE,cAAL,EAAsB;AACrB;AACAjB,UAAAA,IAAI,GAAGiB,cAAc,CAACC,qBAAf,EAAP;AACA,SAHD,MAGO;AACN;AACAlB,UAAAA,IAAI,GAAG,gCAAuB,KAAKvG,MAAL,CAAY6D,SAAZ,CAAsByC,MAAtB,EAAvB,CAAP;AACA,SATgC,CAWjC;AACA;AACA;;;AACA,aAAKD,YAAL,CAAmBE,IAAnB;AACA;AACD;;;uCAEmBmB,S,EAAY;AAAA;;AAAA,yBACQ,KAAK3H,KADb;AAAA,UACvByD,OADuB,gBACvBA,OADuB;AAAA,UACd5G,KADc,gBACdA,KADc;AAAA,UACP+K,UADO,gBACPA,UADO;;AAG/B,UACCnE,OAAO,KAAKkE,SAAS,CAAClE,OAAtB,IACA5G,KAAK,KAAK8K,SAAS,CAAC9K,KADpB,IAEAA,KAAK,KAAK,KAAK+B,YAHhB,EAIE;AACD;AACA;AACA;AACA;AACA;AACA;AACA,YAAKQ,KAAK,CAACC,OAAN,CAAexC,KAAf,KAA0B,qBAASA,KAAT,EAAgB,KAAK+B,YAArB,CAA/B,EAAqE;AACpE;AACA;;AAED,YAAMsD,MAAM,GAAG,KAAKxD,aAAL,CAAoB7B,KAApB,CAAf;;AAEA,YAAK+K,UAAL,EAAkB;AACjB,cAAMC,UAAU,GAAG,KAAKnJ,aAAL,CAAoBiJ,SAAS,CAAC9K,KAA9B,CAAnB;AACA,cAAMyH,MAAM,GAAG,8BAAgBuD,UAAhB,EAA6BvD,MAA5C;AACApC,UAAAA,MAAM,CAAChB,KAAP,GAAeoD,MAAf;AACApC,UAAAA,MAAM,CAACf,GAAP,GAAamD,MAAb;AACA;;AAED,aAAKjG,WAAL,CAAkB6D,MAAlB;AACA,aAAKtD,YAAL,GAAoB/B,KAApB;AACA,OA7B8B,CA+B/B;AACA;AACA;;;AACA,UAAK+K,UAAU,IAAI,CAAED,SAAS,CAACC,UAA1B,IAAwC,CAAE,KAAKnJ,QAAL,EAA/C,EAAiE;AAChE,YAAMyD,OAAM,GAAG,KAAKxD,aAAL,CAAoB7B,KAApB,CAAf;;AACA,YAAMgL,WAAU,GAAG,KAAKnJ,aAAL,CAAoBiJ,SAAS,CAAC9K,KAA9B,CAAnB;;AACA,YAAMyH,OAAM,GAAG,8BAAgBuD,WAAhB,EAA6BvD,MAA5C;AACApC,QAAAA,OAAM,CAAChB,KAAP,GAAeoD,OAAf;AACApC,QAAAA,OAAM,CAACf,GAAP,GAAamD,OAAb;AACA,aAAKjG,WAAL,CAAkB6D,OAAlB;AACA,OAzC8B,CA2C/B;;;AACA,UAAM4F,aAAa,GAAGC,MAAM,CAACC,IAAP,CAAa,KAAKhI,KAAlB,EAA0BiI,IAA1B,CAAgC,UAAEC,IAAF,EAAY;AACjE,YAAKA,IAAI,CAACtG,OAAL,CAAc,SAAd,MAA8B,CAAnC,EAAuC;AACtC,iBAAO,KAAP;AACA;;AAED,eAAOmG,MAAM,CAACC,IAAP,CAAa,MAAI,CAAChI,KAAL,CAAYkI,IAAZ,CAAb,EAAkCD,IAAlC,CAAwC,UAAEE,OAAF,EAAe;AAC7D,iBAAO,MAAI,CAACnI,KAAL,CAAYkI,IAAZ,EAAoBC,OAApB,MAAkCR,SAAS,CAAEO,IAAF,CAAT,CAAmBC,OAAnB,CAAzC;AACA,SAFM,CAAP;AAGA,OARqB,CAAtB;;AAUA,UAAKL,aAAL,EAAqB;AACpB,YAAM5F,QAAM,GAAG,KAAKxD,aAAL,CAAoB7B,KAApB,CAAf;;AACA,aAAKwB,WAAL,CAAkB6D,QAAlB;AACA;AACD;;;kCAEcrF,K,EAAQ;AACtB;AACA,UAAKuC,KAAK,CAACC,OAAN,CAAexC,KAAf,CAAL,EAA8B;AAC7B,eAAO,sBAAQ;AACdiG,UAAAA,IAAI,EAAEsF,iBAASC,MAAT,CAAiBxL,KAAjB,CADQ;AAEdI,UAAAA,YAAY,EAAE,KAAKA,YAFL;AAGdC,UAAAA,oBAAoB,EAAE,KAAKA;AAHb,SAAR,CAAP;AAKA;;AAED,UAAK,KAAK8C,KAAL,CAAWsI,MAAX,KAAsB,QAA3B,EAAsC;AACrC,eAAO,sBAAQ;AACdxF,UAAAA,IAAI,EAAEjG,KADQ;AAEdI,UAAAA,YAAY,EAAE,KAAKA,YAFL;AAGdC,UAAAA,oBAAoB,EAAE,KAAKA;AAHb,SAAR,CAAP;AAKA,OAhBqB,CAkBtB;AACA;;;AACA,UAAKL,KAAK,KAAK,IAAf,EAAsB;AACrB,eAAO,uBAAP;AACA;;AAED,aAAOA,KAAP;AACA;;;wCAEoBA,K,EAAQ;AAC5B,aAAO,6BAAe;AACrBA,QAAAA,KAAK,EAALA,KADqB;AAErBI,QAAAA,YAAY,EAAE,KAAKA,YAFE;AAGrBC,QAAAA,oBAAoB,EAAE,KAAKA,oBAHN;AAIrBkF,QAAAA,iBAJqB,6BAIFC,GAJE,EAII;AACxB,cAAMf,OAAO,GAAGe,GAAG,CAACC,aAAJ,CAAmB,IAAnB,CAAhB;AACAhB,UAAAA,OAAO,CAACiB,YAAR,CAAsB,gBAAtB,EAAwC,GAAxC;AACA,iBAAOjB,OAAP;AACA,SARoB;AASrBW,QAAAA,mBAAmB,EAAE,KAAKjC,KAAL,CAAWiC;AATX,OAAf,EAUHsG,IAVG,CAUEC,SAVT;AAWA;;;kCAEc3L,K,EAAQ;AACtB;AACA,UAAK,KAAKsC,4BAAV,EAAyC;AACxC,eAAOiJ,iBAASK,OAAT,CAAkB,6BAAe;AACvC5L,UAAAA,KAAK,EAALA,KADuC;AAEvCI,UAAAA,YAAY,EAAE,KAAKA,YAFoB;AAGvCC,UAAAA,oBAAoB,EAAE,KAAKA;AAHY,SAAf,EAIrBqL,IAJqB,CAIhBG,UAJF,CAAP;AAKA;;AAED,UAAK,KAAK1I,KAAL,CAAWsI,MAAX,KAAsB,QAA3B,EAAsC;AACrC,eAAO,4BAAc;AACpBzL,UAAAA,KAAK,EAALA,KADoB;AAEpBI,UAAAA,YAAY,EAAE,KAAKA,YAFC;AAGpBC,UAAAA,oBAAoB,EAAE,KAAKA;AAHP,SAAd,CAAP;AAKA;;AAED,aAAOL,KAAP;AACA;;;6BAEQ;AAAA;;AAAA,yBAYJ,KAAKmD,KAZD;AAAA,8CAEPyD,OAFO;AAAA,UAEEkF,OAFF,qCAEY,KAFZ;AAAA,UAGPC,KAHO,gBAGPA,KAHO;AAAA,UAIPC,gBAJO,gBAIPA,gBAJO;AAAA,UAKPC,SALO,gBAKPA,SALO;AAAA,+CAMPC,aANO;AAAA,UAMPA,aANO,sCAMS,KANT;AAAA,UAOPC,kBAPO,gBAOPA,kBAPO;AAAA,UAQPC,WARO,gBAQPA,WARO;AAAA,+CASPC,sBATO;AAAA,UASPA,sBATO,sCASkB,KATlB;AAAA,UAUPtB,UAVO,gBAUPA,UAVO;AAAA,UAWPuB,cAXO,gBAWPA,cAXO;AAcR,UAAMC,YAAY,GAAG,KAAKnM,YAA1B;AACA,UAAMoM,SAAS,GAAG,yBAAe,KAAKrJ,KAApB,CAAlB,CAfQ,CAiBR;AACA;AACA;;AACA,UAAMsJ,GAAG,GAAG,CAAE,QAAF,EAAYX,OAAZ,EAAsBY,IAAtB,EAAZ;AACA,UAAMC,oBAAoB,GAAGP,WAAW,KAAM,CAAErB,UAAF,IAAgBsB,sBAAtB,CAAX,IAA6D,KAAK5K,OAAL,EAA1F;AACA,UAAMmL,OAAO,GAAG,yBAAYZ,gBAAZ,EAA8B,kBAA9B,CAAhB;AACA,UAAM3G,MAAM,GAAG,KAAK/D,SAAL,EAAf;AAEA,aACC;AAAK,QAAA,SAAS,EAAGsL,OAAjB;AACC,QAAA,OAAO,EAAG,KAAKzL;AADhB,SAGG4J,UAAU,IAAI,CAAEmB,aAAhB,IACD,4BAAC,4BAAD,QACC,4BAAC,sBAAD;AAAe,QAAA,QAAQ,EAAGC;AAA1B,QADD,CAJF,EAQGpB,UAAU,IAAImB,aAAd,IACD;AAAK,QAAA,SAAS,EAAC;AAAf,SACC,4BAAC,sBAAD;AAAe,QAAA,QAAQ,EAAGC;AAA1B,QADD,CATF,EAaC,4BAAC,qBAAD;AACC,QAAA,SAAS,EAAG,KAAKhJ,KAAL,CAAWlD,SADxB;AAEC,QAAA,UAAU,EAAGqM,cAFd;AAGC,QAAA,MAAM,EAAGjH,MAHV;AAIC,QAAA,QAAQ,EAAG,KAAK1E;AAJjB,SAMG;AAAA,YAAIkM,UAAJ,SAAIA,UAAJ;AAAA,YAAgBC,SAAhB,SAAgBA,SAAhB;AAAA,YAA2BC,QAA3B,SAA2BA,QAA3B;AAAA,eACD,4BAAC,iBAAD,QACC,4BAAC,gBAAD;AACC,UAAA,OAAO,EAAGjB,OADX;AAEC,UAAA,WAAW,EAAG,MAAI,CAACtL,WAFpB;AAGC,UAAA,OAAO,EAAG,MAAI,CAACC,OAHhB;AAIC,UAAA,KAAK,EAAGsL,KAJT;AAKC,UAAA,YAAY,EAAG,MAAI,CAACiB,mBAAL,CAA0B3H,MAA1B,CALhB;AAMC,UAAA,oBAAoB,EAAGsH,oBANxB;AAOC,wBAAaP,WAPd;AAQC,+BAAkB,MARnB;AASC,2BAAgBS,UATjB;AAUC,uBAAYC,SAVb;AAWC,mCAAwBC;AAXzB,WAYMP,SAZN;AAaC,UAAA,SAAS,EAAGP,SAbb;AAcC,UAAA,GAAG,EAAGQ,GAdP;AAeC,UAAA,OAAO,EAAG,MAAI,CAACxL,OAfhB;AAgBC,UAAA,OAAO,EAAG,MAAI,CAACG,OAhBhB;AAiBC,UAAA,SAAS,EAAG,MAAI,CAACN,SAjBlB;AAkBC,UAAA,OAAO,EAAG,MAAI,CAACC,OAlBhB;AAmBC,UAAA,OAAO,EAAG,MAAI,CAACL,OAnBhB;AAoBC,UAAA,YAAY,EAAG,MAAI,CAACN,YApBrB;AAqBC,UAAA,oBAAoB,EAAG,MAAI,CAACC,oBArB7B;AAsBC,UAAA,MAAM,EAAG,MAAI,CAACsB;AAtBf,WADD,EAyBGgL,oBAAoB,IACrB,4BAAC,OAAD;AACC,UAAA,SAAS,EAAG,yBAAY,2BAAZ,EAAyCV,SAAzC,CADb;AAEC,UAAA,KAAK,EAAGF;AAFT,WAIGQ,YAAY,GAAG,4BAAC,YAAD,QAAgBH,WAAhB,CAAH,GAAkDA,WAJjE,CA1BF,EAiCGrB,UAAU,IAAI,4BAAC,mBAAD;AAAY,UAAA,KAAK,EAAG1F,MAApB;AAA6B,UAAA,QAAQ,EAAG,MAAI,CAAC1E;AAA7C,UAjCjB,CADC;AAAA,OANH,CAbD,CADD;AA4DA;;;EA73B4BsM,kB;;;AAg4B9BlN,QAAQ,CAACmN,YAAT,GAAwB;AACvBf,EAAAA,kBAAkB,EAAE,CAAE,MAAF,EAAU,QAAV,EAAoB,MAApB,EAA4B,eAA5B,CADG;AAEvBV,EAAAA,MAAM,EAAE,QAFe;AAGvBzL,EAAAA,KAAK,EAAE;AAHgB,CAAxB;AAMA,IAAMmN,iBAAiB,GAAG,sBAAS,CAClCC,uBADkC,EAElC,mCAAsB,UAAE5C,OAAF,EAAW6C,QAAX,EAAyB;AAC9C;AACA,MAAKA,QAAQ,CAACtC,UAAT,KAAwB,KAA7B,EAAqC;AACpC,WAAO;AACNuC,MAAAA,QAAQ,EAAE9C,OAAO,CAAC8C;AADZ,KAAP;AAGA,GAN6C,CAO9C;;;AACA,MAAKD,QAAQ,CAACtC,UAAT,KAAwB,IAA7B,EAAoC;AACnC,WAAO;AACNA,MAAAA,UAAU,EAAEP,OAAO,CAACO,UADd;AAENuC,MAAAA,QAAQ,EAAE9C,OAAO,CAAC8C;AAFZ,KAAP;AAIA,GAb6C,CAe9C;;;AACA,SAAO;AACNvC,IAAAA,UAAU,EAAEP,OAAO,CAACO,UAAR,IAAsBP,OAAO,CAAC+C,cAAR,KAA2BF,QAAQ,CAAC9J,UADhE;AAENpC,IAAAA,iBAAiB,EAAEqJ,OAAO,CAACrJ,iBAFrB;AAGNmM,IAAAA,QAAQ,EAAE9C,OAAO,CAAC8C;AAHZ,GAAP;AAKA,CArBD,CAFkC,EAwBlC,sBAAY,UAAEE,MAAF,EAAc;AAAA,gBACGA,MAAM,CAAE,eAAF,CADT;AAAA,MACjBC,eADiB,WACjBA,eADiB;;AAAA,iBAEwCD,MAAM,CAAE,aAAF,CAF9C;AAAA,MAEjBjG,wBAFiB,YAEjBA,wBAFiB;AAAA,MAESS,0BAFT,YAESA,0BAFT;;AAIzB,SAAO;AACNwB,IAAAA,eAAe,EAAEiE,eAAe,CAAE,SAAF,CAD1B;AAENlG,IAAAA,wBAAwB,EAAEA,wBAAwB,EAF5C;AAGNS,IAAAA,0BAA0B,EAAEA,0BAA0B;AAHhD,GAAP;AAKA,CATD,CAxBkC,EAkClC,wBAAc,UAAE0F,QAAF,EAAgB;AAAA,kBAOzBA,QAAQ,CAAE,aAAF,CAPiB;AAAA,MAE5BC,eAF4B,aAE5BA,eAF4B;AAAA,MAG5BC,IAH4B,aAG5BA,IAH4B;AAAA,MAI5BC,IAJ4B,aAI5BA,IAJ4B;AAAA,MAK5BC,kBAL4B,aAK5BA,kBAL4B;AAAA,MAM5BC,iBAN4B,aAM5BA,iBAN4B;;AAS7B,SAAO;AACN7M,IAAAA,iBAAiB,EAAEyM,eADb;AAEN3J,IAAAA,MAAM,EAAE4J,IAFF;AAGN7J,IAAAA,MAAM,EAAE8J,IAHF;AAIN5F,IAAAA,oBAAoB,EAAE6F,kBAJhB;AAKN5F,IAAAA,mBAAmB,EAAE6F;AALf,GAAP;AAOA,CAhBD,CAlCkC,EAmDlCC,wBAnDkC,EAoDlC,6BAAa,sBAAb,CApDkC,CAAT,EAqDrBjO,QArDqB,CAA1B;;AAuDAoN,iBAAiB,CAACc,OAAlB,GAA4B,iBAAoD;AAAA,MAAhDjO,KAAgD,SAAhDA,KAAgD;AAAA,MAAhCkO,GAAgC,SAAzCtH,OAAyC;AAAA,MAA3B1G,SAA2B,SAA3BA,SAA2B;AAAA,MAAbiD,KAAa;AAC/E,MAAI8C,IAAI,GAAGjG,KAAX;AACA,MAAIuM,YAAJ;;AAEA,MAAKrM,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,GAApC,IAA2CA,SAAS,KAAK,IAA9D,EAAqE;AACpEqM,IAAAA,YAAY,GAAGrM,SAAS,KAAK,IAAd,GAAqB,GAArB,GAA2BA,SAA1C;AACA,GAN8E,CAQ/E;;;AACA,MAAKqC,KAAK,CAACC,OAAN,CAAexC,KAAf,CAAL,EAA8B;AAC7BiG,IAAAA,IAAI,GAAGsF,iBAASC,MAAT,CAAiBxL,KAAjB,CAAP;AACA;;AAED,MAAK,CAAEiG,IAAF,IAAUsG,YAAf,EAA8B;AAC7BtG,IAAAA,IAAI,cAAQsG,YAAR,gBAA4BA,YAA5B,MAAJ;AACA;;AAED,MAAM9F,OAAO,GAAG,4BAAC,gBAAD,QAAWR,IAAX,CAAhB;;AAEA,MAAKiI,GAAL,EAAW;AACV,WAAO,4BAAC,GAAD,EAAU,kBAAM/K,KAAN,EAAa,CAAE,QAAF,CAAb,CAAV,EAA0CsD,OAA1C,CAAP;AACA;;AAED,SAAOA,OAAP;AACA,CAxBD;;AA0BA0G,iBAAiB,CAAC1L,OAAlB,GAA4B,YAAkB;AAAA,MAAhBzB,KAAgB,uEAAR,EAAQ;;AAC7C;AACA,MAAKuC,KAAK,CAACC,OAAN,CAAexC,KAAf,CAAL,EAA8B;AAC7B,WAAO,CAAEA,KAAF,IAAWA,KAAK,CAACyH,MAAN,KAAiB,CAAnC;AACA;;AAED,SAAOzH,KAAK,CAACyH,MAAN,KAAiB,CAAxB;AACA,CAPD;;AASA0F,iBAAiB,CAACc,OAAlB,CAA0Bf,YAA1B,GAAyC;AACxCzB,EAAAA,MAAM,EAAE,QADgC;AAExCzL,EAAAA,KAAK,EAAE;AAFiC,CAAzC;eAKemN,iB","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\nimport {\n\tdefer,\n\tfind,\n\tisNil,\n\tisEqual,\n\tomit,\n} from 'lodash';\nimport memize from 'memize';\n\n/**\n * WordPress dependencies\n */\nimport { Component, Fragment, RawHTML } from '@wordpress/element';\nimport {\n\tisHorizontalEdge,\n\tgetRectangleFromRange,\n\tgetScrollContainer,\n} from '@wordpress/dom';\nimport { createBlobURL } from '@wordpress/blob';\nimport { BACKSPACE, DELETE, ENTER, rawShortcut } from '@wordpress/keycodes';\nimport { withDispatch, withSelect } from '@wordpress/data';\nimport { pasteHandler, children, getBlockTransforms, findTransform } from '@wordpress/blocks';\nimport { withInstanceId, withSafeTimeout, compose } from '@wordpress/compose';\nimport { isURL } from '@wordpress/url';\nimport {\n\tisEmpty,\n\tcreate,\n\tapply,\n\tapplyFormat,\n\tsplit,\n\ttoHTMLString,\n\tgetTextContent,\n\tinsert,\n\tinsertLineSeparator,\n\tisEmptyLine,\n\tunstableToDom,\n\tgetSelectionStart,\n\tgetSelectionEnd,\n\tremove,\n\tisCollapsed,\n\tLINE_SEPARATOR,\n\tcharAt,\n} from '@wordpress/rich-text';\nimport { decodeEntities } from '@wordpress/html-entities';\nimport { withFilters } from '@wordpress/components';\n\n/**\n * Internal dependencies\n */\nimport Autocomplete from '../autocomplete';\nimport BlockFormatControls from '../block-format-controls';\nimport FormatEdit from './format-edit';\nimport FormatToolbar from './format-toolbar';\nimport TinyMCE, { TINYMCE_ZWSP } from './tinymce';\nimport { pickAriaProps } from './aria';\nimport { getPatterns } from './patterns';\nimport { withBlockEditContext } from '../block-edit/context';\n\n/**\n * Browser dependencies\n */\n\nconst { getSelection } = window;\n\nexport class RichText extends Component {\n\tconstructor( { value, onReplace, multiline } ) {\n\t\tsuper( ...arguments );\n\n\t\tif ( multiline === true || multiline === 'p' || multiline === 'li' ) {\n\t\t\tthis.multilineTag = multiline === true ? 'p' : multiline;\n\t\t}\n\n\t\tif ( this.multilineTag === 'li' ) {\n\t\t\tthis.multilineWrapperTags = [ 'ul', 'ol' ];\n\t\t}\n\n\t\tthis.onInit = this.onInit.bind( this );\n\t\tthis.getSettings = this.getSettings.bind( this );\n\t\tthis.onSetup = this.onSetup.bind( this );\n\t\tthis.onFocus = this.onFocus.bind( this );\n\t\tthis.onChange = this.onChange.bind( this );\n\t\tthis.onNodeChange = this.onNodeChange.bind( this );\n\t\tthis.onDeleteKeyDown = this.onDeleteKeyDown.bind( this );\n\t\tthis.onKeyDown = this.onKeyDown.bind( this );\n\t\tthis.onKeyUp = this.onKeyUp.bind( this );\n\t\tthis.onPropagateUndo = this.onPropagateUndo.bind( this );\n\t\tthis.onPaste = this.onPaste.bind( this );\n\t\tthis.onCreateUndoLevel = this.onCreateUndoLevel.bind( this );\n\t\tthis.setFocusedElement = this.setFocusedElement.bind( this );\n\t\tthis.onInput = this.onInput.bind( this );\n\t\tthis.onSelectionChange = this.onSelectionChange.bind( this );\n\t\tthis.getRecord = this.getRecord.bind( this );\n\t\tthis.createRecord = this.createRecord.bind( this );\n\t\tthis.applyRecord = this.applyRecord.bind( this );\n\t\tthis.isEmpty = this.isEmpty.bind( this );\n\t\tthis.valueToFormat = this.valueToFormat.bind( this );\n\t\tthis.setRef = this.setRef.bind( this );\n\t\tthis.isActive = this.isActive.bind( this );\n\n\t\tthis.formatToValue = memize( this.formatToValue.bind( this ), { size: 1 } );\n\n\t\tthis.savedContent = value;\n\t\tthis.patterns = getPatterns( {\n\t\t\tonReplace,\n\t\t\tmultilineTag: this.multilineTag,\n\t\t\tvalueToFormat: this.valueToFormat,\n\t\t} );\n\t\tthis.enterPatterns = getBlockTransforms( 'from' ).filter( ( { type, trigger } ) =>\n\t\t\ttype === 'pattern' && trigger === 'enter'\n\t\t);\n\n\t\tthis.state = {};\n\n\t\tthis.usedDeprecatedChildrenSource = Array.isArray( value );\n\t}\n\n\tcomponentDidMount() {\n\t\tdocument.addEventListener( 'selectionchange', this.onSelectionChange );\n\t}\n\n\tcomponentWillUnmount() {\n\t\tdocument.removeEventListener( 'selectionchange', this.onSelectionChange );\n\t}\n\n\tsetRef( node ) {\n\t\tthis.editableRef = node;\n\t}\n\n\tisActive() {\n\t\treturn this.editableRef === document.activeElement;\n\t}\n\n\t/**\n\t * Retrieves the settings for this block.\n\t *\n\t * Allows passing in settings which will be overwritten.\n\t *\n\t * @param {Object} settings The settings to overwrite.\n\t * @return {Object} The settings for this block.\n\t */\n\tgetSettings( settings ) {\n\t\tsettings = {\n\t\t\t...settings,\n\t\t\tforced_root_block: this.multilineTag || false,\n\t\t\t// Allow TinyMCE to keep one undo level for comparing changes.\n\t\t\t// Prevent it otherwise from accumulating any history.\n\t\t\tcustom_undo_redo_levels: 1,\n\t\t};\n\n\t\tconst { unstableGetSettings } = this.props;\n\t\tif ( unstableGetSettings ) {\n\t\t\tsettings = unstableGetSettings( settings );\n\t\t}\n\n\t\treturn settings;\n\t}\n\n\t/**\n\t * Handles the onSetup event for the TinyMCE component.\n\t *\n\t * Will setup event handlers for the TinyMCE instance.\n\t * An `onSetup` function in the props will be called if it is present.\n\t *\n\t * @param {tinymce} editor The editor instance as passed by TinyMCE.\n\t */\n\tonSetup( editor ) {\n\t\tthis.editor = editor;\n\n\t\teditor.on( 'init', this.onInit );\n\t\teditor.on( 'nodechange', this.onNodeChange );\n\t\teditor.on( 'BeforeExecCommand', this.onPropagateUndo );\n\t\t// The change event in TinyMCE fires every time an undo level is added.\n\t\teditor.on( 'change', this.onCreateUndoLevel );\n\n\t\tconst { unstableOnSetup } = this.props;\n\t\tif ( unstableOnSetup ) {\n\t\t\tunstableOnSetup( editor );\n\t\t}\n\t}\n\n\tsetFocusedElement() {\n\t\tif ( this.props.setFocusedElement ) {\n\t\t\tthis.props.setFocusedElement( this.props.instanceId );\n\t\t}\n\t}\n\n\tonInit() {\n\t\tthis.editor.shortcuts.add( rawShortcut.primary( 'z' ), '', 'Undo' );\n\t\tthis.editor.shortcuts.add( rawShortcut.primaryShift( 'z' ), '', 'Redo' );\n\n\t\t// Remove TinyMCE Core shortcut for consistency with global editor\n\t\t// shortcuts. Also clashes with Mac browsers.\n\t\tthis.editor.shortcuts.remove( 'meta+y', '', 'Redo' );\n\t}\n\n\t/**\n\t * Handles an undo event from TinyMCE.\n\t *\n\t * @param {UndoEvent} event The undo event as triggered by TinyMCE.\n\t */\n\tonPropagateUndo( event ) {\n\t\tconst { onUndo, onRedo } = this.props;\n\t\tconst { command } = event;\n\n\t\tif ( command === 'Undo' && onUndo ) {\n\t\t\tdefer( onUndo );\n\t\t\tevent.preventDefault();\n\t\t}\n\n\t\tif ( command === 'Redo' && onRedo ) {\n\t\t\tdefer( onRedo );\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n\n\t/**\n\t * Get the current record (value and selection) from props and state.\n\t *\n\t * @return {Object} The current record (value and selection).\n\t */\n\tgetRecord() {\n\t\tconst { formats, text } = this.formatToValue( this.props.value );\n\t\tconst { start, end } = this.state;\n\n\t\treturn { formats, text, start, end };\n\t}\n\n\tcreateRecord() {\n\t\tconst range = getSelection().getRangeAt( 0 );\n\n\t\treturn create( {\n\t\t\telement: this.editableRef,\n\t\t\trange,\n\t\t\tmultilineTag: this.multilineTag,\n\t\t\tmultilineWrapperTags: this.multilineWrapperTags,\n\t\t\tremoveNode: ( node ) => node.getAttribute( 'data-mce-bogus' ) === 'all',\n\t\t\tunwrapNode: ( node ) => !! node.getAttribute( 'data-mce-bogus' ),\n\t\t\tremoveAttribute: ( attribute ) => attribute.indexOf( 'data-mce-' ) === 0,\n\t\t\tfilterString: ( string ) => string.replace( TINYMCE_ZWSP, '' ),\n\t\t\tprepareEditableTree: this.props.prepareEditableTree,\n\t\t} );\n\t}\n\n\tapplyRecord( record ) {\n\t\tapply( {\n\t\t\tvalue: record,\n\t\t\tcurrent: this.editableRef,\n\t\t\tmultilineTag: this.multilineTag,\n\t\t\tmultilineWrapperTags: this.multilineWrapperTags,\n\t\t\tcreateLinePadding( doc ) {\n\t\t\t\tconst element = doc.createElement( 'br' );\n\t\t\t\telement.setAttribute( 'data-mce-bogus', '1' );\n\t\t\t\treturn element;\n\t\t\t},\n\t\t\tprepareEditableTree: this.props.prepareEditableTree,\n\t\t} );\n\t}\n\n\tisEmpty() {\n\t\treturn isEmpty( this.formatToValue( this.props.value ) );\n\t}\n\n\t/**\n\t * Handles a paste event.\n\t *\n\t * Saves the pasted data as plain text in `pastedPlainText`.\n\t *\n\t * @param {PasteEvent} event The paste event.\n\t */\n\tonPaste( event ) {\n\t\tconst clipboardData = event.clipboardData;\n\t\tlet { items, files } = clipboardData;\n\n\t\t// In Edge these properties can be null instead of undefined, so a more\n\t\t// rigorous test is required over using default values.\n\t\titems = isNil( items ) ? [] : items;\n\t\tfiles = isNil( files ) ? [] : files;\n\n\t\tconst item = find( [ ...items, ...files ], ( { type } ) => /^image\\/(?:jpe?g|png|gif)$/.test( type ) );\n\t\tlet plainText = '';\n\t\tlet html = '';\n\n\t\t// IE11 only supports `Text` as an argument for `getData` and will\n\t\t// otherwise throw an invalid argument error, so we try the standard\n\t\t// arguments first, then fallback to `Text` if they fail.\n\t\ttry {\n\t\t\tplainText = clipboardData.getData( 'text/plain' );\n\t\t\thtml = clipboardData.getData( 'text/html' );\n\t\t} catch ( error1 ) {\n\t\t\ttry {\n\t\t\t\thtml = clipboardData.getData( 'Text' );\n\t\t\t} catch ( error2 ) {\n\t\t\t\t// Some browsers like UC Browser paste plain text by default and\n\t\t\t\t// don't support clipboardData at all, so allow default\n\t\t\t\t// behaviour.\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tevent.preventDefault();\n\n\t\t// Allows us to ask for this information when we get a report.\n\t\twindow.console.log( 'Received HTML:\\n\\n', html );\n\t\twindow.console.log( 'Received plain text:\\n\\n', plainText );\n\n\t\t// Only process file if no HTML is present.\n\t\t// Note: a pasted file may have the URL as plain text.\n\t\tif ( item && ! html ) {\n\t\t\tconst file = item.getAsFile ? item.getAsFile() : item;\n\t\t\tconst content = pasteHandler( {\n\t\t\t\tHTML: `<img src=\"${ createBlobURL( file ) }\">`,\n\t\t\t\tmode: 'BLOCKS',\n\t\t\t\ttagName: this.props.tagName,\n\t\t\t} );\n\t\t\tconst shouldReplace = this.props.onReplace && this.isEmpty();\n\n\t\t\t// Allows us to ask for this information when we get a report.\n\t\t\twindow.console.log( 'Received item:\\n\\n', file );\n\n\t\t\tif ( shouldReplace ) {\n\t\t\t\t// Necessary to allow the paste bin to be removed without errors.\n\t\t\t\tthis.props.setTimeout( () => this.props.onReplace( content ) );\n\t\t\t} else if ( this.props.onSplit ) {\n\t\t\t\t// Necessary to get the right range.\n\t\t\t\t// Also done in the TinyMCE paste plugin.\n\t\t\t\tthis.props.setTimeout( () => this.splitContent( content ) );\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// There is a selection, check if a URL is pasted.\n\t\tif ( ! this.editor.selection.isCollapsed() ) {\n\t\t\tconst pastedText = ( html || plainText ).replace( /<[^>]+>/g, '' ).trim();\n\n\t\t\t// A URL was pasted, turn the selection into a link\n\t\t\tif ( isURL( pastedText ) ) {\n\t\t\t\tthis.onChange( applyFormat( this.getRecord(), {\n\t\t\t\t\ttype: 'a',\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\thref: decodeEntities( pastedText ),\n\t\t\t\t\t},\n\t\t\t\t} ) );\n\n\t\t\t\t// Allows us to ask for this information when we get a report.\n\t\t\t\twindow.console.log( 'Created link:\\n\\n', pastedText );\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst shouldReplace = this.props.onReplace && this.isEmpty();\n\n\t\tlet mode = 'INLINE';\n\n\t\tif ( shouldReplace ) {\n\t\t\tmode = 'BLOCKS';\n\t\t} else if ( this.props.onSplit ) {\n\t\t\tmode = 'AUTO';\n\t\t}\n\n\t\tconst content = pasteHandler( {\n\t\t\tHTML: html,\n\t\t\tplainText,\n\t\t\tmode,\n\t\t\ttagName: this.props.tagName,\n\t\t\tcanUserUseUnfilteredHTML: this.props.canUserUseUnfilteredHTML,\n\t\t} );\n\n\t\tif ( typeof content === 'string' ) {\n\t\t\tconst recordToInsert = create( { html: content } );\n\t\t\tthis.onChange( insert( this.getRecord(), recordToInsert ) );\n\t\t} else if ( this.props.onSplit ) {\n\t\t\tif ( ! content.length ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( shouldReplace ) {\n\t\t\t\tthis.props.onReplace( content );\n\t\t\t} else {\n\t\t\t\tthis.splitContent( content, { paste: true } );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Handles a focus event on the contenteditable field, calling the\n\t * `unstableOnFocus` prop callback if one is defined. The callback does not\n\t * receive any arguments.\n\t *\n\t * This is marked as a private API and the `unstableOnFocus` prop is not\n\t * documented, as the current requirements where it is used are subject to\n\t * future refactoring following `isSelected` handling.\n\t *\n\t * In contrast with `setFocusedElement`, this is only triggered in response\n\t * to focus within the contenteditable field, whereas `setFocusedElement`\n\t * is triggered on focus within any `RichText` descendent element.\n\t *\n\t * @see setFocusedElement\n\t *\n\t * @private\n\t */\n\tonFocus() {\n\t\tconst { unstableOnFocus } = this.props;\n\t\tif ( unstableOnFocus ) {\n\t\t\tunstableOnFocus();\n\t\t}\n\t}\n\n\t/**\n\t * Handle input on the next selection change event.\n\t */\n\tonInput() {\n\t\tconst record = this.createRecord();\n\t\tconst transformed = this.patterns.reduce( ( accumlator, transform ) => transform( accumlator ), record );\n\n\t\tthis.onChange( transformed );\n\t}\n\n\t/**\n\t * Handles the `selectionchange` event: sync the selection to local state.\n\t */\n\tonSelectionChange() {\n\t\t// Ensure it's the active element. This is a global event.\n\t\tif ( ! this.isActive() ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { start, end, formats } = this.createRecord();\n\n\t\tif ( start !== this.state.start || end !== this.state.end ) {\n\t\t\tconst isCaretWithinFormattedText = this.props.isCaretWithinFormattedText;\n\t\t\tif ( ! isCaretWithinFormattedText && formats[ start ] ) {\n\t\t\t\tthis.props.onEnterFormattedText();\n\t\t\t} else if ( isCaretWithinFormattedText && ! formats[ start ] ) {\n\t\t\t\tthis.props.onExitFormattedText();\n\t\t\t}\n\n\t\t\tthis.setState( { start, end } );\n\t\t}\n\t}\n\n\t/**\n\t * Sync the value to global state. The node tree and selection will also be\n\t * updated if differences are found.\n\t *\n\t * @param {Object}  record        The record to sync and apply.\n\t * @param {boolean} _withoutApply If true, the record won't be applied to\n\t *                                the live DOM.\n\t */\n\tonChange( record, _withoutApply ) {\n\t\tif ( ! _withoutApply ) {\n\t\t\tthis.applyRecord( record );\n\t\t}\n\n\t\tconst { start, end } = record;\n\n\t\tthis.savedContent = this.valueToFormat( record );\n\t\tthis.props.onChange( this.savedContent );\n\t\tthis.setState( { start, end } );\n\t}\n\n\tonCreateUndoLevel( event ) {\n\t\t// TinyMCE fires a `change` event when the first letter in an instance\n\t\t// is typed. This should not create a history record in Gutenberg.\n\t\t// https://github.com/tinymce/tinymce/blob/4.7.11/src/core/main/ts/api/UndoManager.ts#L116-L125\n\t\t// In other cases TinyMCE won't fire a `change` with at least a previous\n\t\t// record present, so this is a reliable check.\n\t\t// https://github.com/tinymce/tinymce/blob/4.7.11/src/core/main/ts/api/UndoManager.ts#L272-L275\n\t\tif ( event && event.lastLevel === null ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Always ensure the content is up-to-date. This is needed because e.g.\n\t\t// making something bold will trigger a TinyMCE change event but no\n\t\t// input event. Avoid dispatching an action if the original event is\n\t\t// blur because the content will already be up-to-date.\n\t\tif ( ! event || ! event.originalEvent || event.originalEvent.type !== 'blur' ) {\n\t\t\tthis.onChange( this.createRecord(), true );\n\t\t}\n\n\t\tthis.props.onCreateUndoLevel();\n\t}\n\n\t/**\n\t * Handles a delete keyDown event to handle merge or removal for collapsed\n\t * selection where caret is at directional edge: forward for a delete key,\n\t * reverse for a backspace key.\n\t *\n\t * @link https://en.wikipedia.org/wiki/Caret_navigation\n\t *\n\t * @param {KeyboardEvent} event Keydown event.\n\t */\n\tonDeleteKeyDown( event ) {\n\t\tconst { onMerge, onRemove } = this.props;\n\t\tif ( ! onMerge && ! onRemove ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { keyCode } = event;\n\t\tconst isReverse = keyCode === BACKSPACE;\n\n\t\t// Only process delete if the key press occurs at uncollapsed edge.\n\t\tif ( ! isCollapsed( this.createRecord() ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst empty = this.isEmpty();\n\n\t\t// It is important to consider emptiness because an empty container\n\t\t// will include a bogus TinyMCE BR node _after_ the caret, so in a\n\t\t// forward deletion the isHorizontalEdge function will incorrectly\n\t\t// interpret the presence of the bogus node as not being at the edge.\n\t\tconst isEdge = ( empty || isHorizontalEdge( this.editableRef, isReverse ) );\n\n\t\tif ( ! isEdge ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( onMerge ) {\n\t\t\tonMerge( ! isReverse );\n\t\t}\n\n\t\t// Only handle remove on Backspace. This serves dual-purpose of being\n\t\t// an intentional user interaction distinguishing between Backspace and\n\t\t// Delete to remove the empty field, but also to avoid merge & remove\n\t\t// causing destruction of two fields (merge, then removed merged).\n\t\tif ( onRemove && empty && isReverse ) {\n\t\t\tonRemove( ! isReverse );\n\t\t}\n\n\t\tevent.preventDefault();\n\t}\n\n\t/**\n\t * Handles a keydown event.\n\t *\n\t * @param {KeyboardEvent} event The keydown event.\n\t */\n\tonKeyDown( event ) {\n\t\tconst { keyCode } = event;\n\n\t\tif ( keyCode === DELETE || keyCode === BACKSPACE ) {\n\t\t\tconst value = this.createRecord();\n\t\t\tconst start = getSelectionStart( value );\n\t\t\tconst end = getSelectionEnd( value );\n\n\t\t\t// Always handle uncollapsed selections ourselves.\n\t\t\tif ( ! isCollapsed( value ) ) {\n\t\t\t\tthis.onChange( remove( value ) );\n\t\t\t\tevent.preventDefault();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( this.multilineTag ) {\n\t\t\t\tlet newValue;\n\n\t\t\t\tif ( keyCode === BACKSPACE ) {\n\t\t\t\t\tif ( charAt( value, start - 1 ) === LINE_SEPARATOR ) {\n\t\t\t\t\t\tnewValue = remove(\n\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\t// Only remove the line if the selection is\n\t\t\t\t\t\t\t// collapsed.\n\t\t\t\t\t\t\tisCollapsed( value ) ? start - 1 : start,\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else if ( charAt( value, end ) === LINE_SEPARATOR ) {\n\t\t\t\t\tnewValue = remove(\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t\tstart,\n\t\t\t\t\t\t// Only remove the line if the selection is collapsed.\n\t\t\t\t\t\tisCollapsed( value ) ? end + 1 : end,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif ( newValue ) {\n\t\t\t\t\tthis.onChange( newValue );\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.onDeleteKeyDown( event );\n\t\t} else if ( keyCode === ENTER ) {\n\t\t\tevent.preventDefault();\n\n\t\t\tconst record = this.createRecord();\n\n\t\t\tif ( this.props.onReplace ) {\n\t\t\t\tconst text = getTextContent( record );\n\t\t\t\tconst transformation = findTransform( this.enterPatterns, ( item ) => {\n\t\t\t\t\treturn item.regExp.test( text );\n\t\t\t\t} );\n\n\t\t\t\tif ( transformation ) {\n\t\t\t\t\tthis.props.onReplace( [\n\t\t\t\t\t\ttransformation.transform( { content: text } ),\n\t\t\t\t\t] );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( this.multilineTag ) {\n\t\t\t\tif ( this.props.onSplit && isEmptyLine( record ) ) {\n\t\t\t\t\tthis.props.onSplit( ...split( record ).map( this.valueToFormat ) );\n\t\t\t\t} else {\n\t\t\t\t\tthis.onChange( insertLineSeparator( record ) );\n\t\t\t\t}\n\t\t\t} else if ( event.shiftKey || ! this.props.onSplit ) {\n\t\t\t\tconst text = getTextContent( record );\n\t\t\t\tconst length = text.length;\n\t\t\t\tlet toInsert = '\\n';\n\n\t\t\t\t// If the caret is at the end of the text, and there is no\n\t\t\t\t// trailing line break or no text at all, we have to insert two\n\t\t\t\t// line breaks in order to create a new line visually and place\n\t\t\t\t// the caret there.\n\t\t\t\tif ( record.end === length && (\n\t\t\t\t\ttext.charAt( length - 1 ) !== '\\n' || length === 0\n\t\t\t\t) ) {\n\t\t\t\t\ttoInsert = '\\n\\n';\n\t\t\t\t}\n\n\t\t\t\tthis.onChange( insert( record, toInsert ) );\n\t\t\t} else {\n\t\t\t\tthis.splitContent();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Handles a keyup event.\n\t *\n\t * @param {number} $1.keyCode The key code that has been pressed on the\n\t *                            keyboard.\n\t */\n\tonKeyUp( { keyCode } ) {\n\t\t// The input event does not fire when the whole field is selected and\n\t\t// BACKSPACE is pressed.\n\t\tif ( keyCode === BACKSPACE ) {\n\t\t\tthis.onChange( this.createRecord(), true );\n\t\t}\n\n\t\t// `scrollToRect` is called on `nodechange`, whereas calling it on\n\t\t// `keyup` *when* moving to a new RichText element results in incorrect\n\t\t// scrolling. Though the following allows false positives, it results\n\t\t// in much smoother scrolling.\n\t\tif ( this.props.isViewportSmall && keyCode !== BACKSPACE && keyCode !== ENTER ) {\n\t\t\tthis.scrollToRect( getRectangleFromRange( this.editor.selection.getRng() ) );\n\t\t}\n\t}\n\n\tscrollToRect( rect ) {\n\t\tconst { top: caretTop } = rect;\n\t\tconst container = getScrollContainer( this.editableRef );\n\n\t\tif ( ! container ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// When scrolling, avoid positioning the caret at the very top of\n\t\t// the viewport, providing some \"air\" and some textual context for\n\t\t// the user, and avoiding toolbars.\n\t\tconst graceOffset = 100;\n\n\t\t// Avoid pointless scrolling by establishing a threshold under\n\t\t// which scrolling should be skipped;\n\t\tconst epsilon = 10;\n\t\tconst delta = caretTop - graceOffset;\n\n\t\tif ( Math.abs( delta ) > epsilon ) {\n\t\t\tcontainer.scrollTo(\n\t\t\t\tcontainer.scrollLeft,\n\t\t\t\tcontainer.scrollTop + delta,\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Splits the content at the location of the selection.\n\t *\n\t * Replaces the content of the editor inside this element with the contents\n\t * before the selection. Sends the elements after the selection to the `onSplit`\n\t * handler.\n\t *\n\t * @param {Array}  blocks  The blocks to add after the split point.\n\t * @param {Object} context The context for splitting.\n\t */\n\tsplitContent( blocks = [], context = {} ) {\n\t\tconst { onSplit } = this.props;\n\t\tconst record = this.createRecord();\n\n\t\tif ( ! onSplit ) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet [ before, after ] = split( record );\n\n\t\t// In case split occurs at the trailing or leading edge of the field,\n\t\t// assume that the before/after values respectively reflect the current\n\t\t// value. This also provides an opportunity for the parent component to\n\t\t// determine whether the before/after value has changed using a trivial\n\t\t//  strict equality operation.\n\t\tif ( isEmpty( after ) ) {\n\t\t\tbefore = record;\n\t\t} else if ( isEmpty( before ) ) {\n\t\t\tafter = record;\n\t\t}\n\n\t\t// If pasting and the split would result in no content other than the\n\t\t// pasted blocks, remove the before and after blocks.\n\t\tif ( context.paste ) {\n\t\t\tbefore = isEmpty( before ) ? null : before;\n\t\t\tafter = isEmpty( after ) ? null : after;\n\t\t}\n\n\t\tif ( before ) {\n\t\t\tbefore = this.valueToFormat( before );\n\t\t}\n\n\t\tif ( after ) {\n\t\t\tafter = this.valueToFormat( after );\n\t\t}\n\n\t\tonSplit( before, after, ...blocks );\n\t}\n\n\tonNodeChange( { parents } ) {\n\t\tif ( ! this.isActive() ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( this.props.isViewportSmall ) {\n\t\t\tlet rect;\n\t\t\tconst selectedAnchor = find( parents, ( node ) => node.tagName === 'A' );\n\t\t\tif ( selectedAnchor ) {\n\t\t\t\t// If we selected a link, position the Link UI below the link\n\t\t\t\trect = selectedAnchor.getBoundingClientRect();\n\t\t\t} else {\n\t\t\t\t// Otherwise, position the Link UI below the cursor or text selection\n\t\t\t\trect = getRectangleFromRange( this.editor.selection.getRng() );\n\t\t\t}\n\n\t\t\t// Originally called on `focusin`, that hook turned out to be\n\t\t\t// premature. On `nodechange` we can work with the finalized TinyMCE\n\t\t\t// instance and scroll to proper position.\n\t\t\tthis.scrollToRect( rect );\n\t\t}\n\t}\n\n\tcomponentDidUpdate( prevProps ) {\n\t\tconst { tagName, value, isSelected } = this.props;\n\n\t\tif (\n\t\t\ttagName === prevProps.tagName &&\n\t\t\tvalue !== prevProps.value &&\n\t\t\tvalue !== this.savedContent\n\t\t) {\n\t\t\t// Handle deprecated `children` and `node` sources.\n\t\t\t// The old way of passing a value with the `node` matcher required\n\t\t\t// the value to be mapped first, creating a new array each time, so\n\t\t\t// a shallow check wouldn't work. We need to check deep equality.\n\t\t\t// This is only executed for a deprecated API and will eventually be\n\t\t\t// removed.\n\t\t\tif ( Array.isArray( value ) && isEqual( value, this.savedContent ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst record = this.formatToValue( value );\n\n\t\t\tif ( isSelected ) {\n\t\t\t\tconst prevRecord = this.formatToValue( prevProps.value );\n\t\t\t\tconst length = getTextContent( prevRecord ).length;\n\t\t\t\trecord.start = length;\n\t\t\t\trecord.end = length;\n\t\t\t}\n\n\t\t\tthis.applyRecord( record );\n\t\t\tthis.savedContent = value;\n\t\t}\n\n\t\t// If blocks are merged, but the content remains the same, e.g. merging\n\t\t// an empty paragraph into another, then also set the selection to the\n\t\t// end.\n\t\tif ( isSelected && ! prevProps.isSelected && ! this.isActive() ) {\n\t\t\tconst record = this.formatToValue( value );\n\t\t\tconst prevRecord = this.formatToValue( prevProps.value );\n\t\t\tconst length = getTextContent( prevRecord ).length;\n\t\t\trecord.start = length;\n\t\t\trecord.end = length;\n\t\t\tthis.applyRecord( record );\n\t\t}\n\n\t\t// If any format props update, reapply value.\n\t\tconst shouldReapply = Object.keys( this.props ).some( ( name ) => {\n\t\t\tif ( name.indexOf( 'format_' ) !== 0 ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn Object.keys( this.props[ name ] ).some( ( subName ) => {\n\t\t\t\treturn this.props[ name ][ subName ] !== prevProps[ name ][ subName ];\n\t\t\t} );\n\t\t} );\n\n\t\tif ( shouldReapply ) {\n\t\t\tconst record = this.formatToValue( value );\n\t\t\tthis.applyRecord( record );\n\t\t}\n\t}\n\n\tformatToValue( value ) {\n\t\t// Handle deprecated `children` and `node` sources.\n\t\tif ( Array.isArray( value ) ) {\n\t\t\treturn create( {\n\t\t\t\thtml: children.toHTML( value ),\n\t\t\t\tmultilineTag: this.multilineTag,\n\t\t\t\tmultilineWrapperTags: this.multilineWrapperTags,\n\t\t\t} );\n\t\t}\n\n\t\tif ( this.props.format === 'string' ) {\n\t\t\treturn create( {\n\t\t\t\thtml: value,\n\t\t\t\tmultilineTag: this.multilineTag,\n\t\t\t\tmultilineWrapperTags: this.multilineWrapperTags,\n\t\t\t} );\n\t\t}\n\n\t\t// Guard for blocks passing `null` in onSplit callbacks. May be removed\n\t\t// if onSplit is revised to not pass a `null` value.\n\t\tif ( value === null ) {\n\t\t\treturn create();\n\t\t}\n\n\t\treturn value;\n\t}\n\n\tvalueToEditableHTML( value ) {\n\t\treturn unstableToDom( {\n\t\t\tvalue,\n\t\t\tmultilineTag: this.multilineTag,\n\t\t\tmultilineWrapperTags: this.multilineWrapperTags,\n\t\t\tcreateLinePadding( doc ) {\n\t\t\t\tconst element = doc.createElement( 'br' );\n\t\t\t\telement.setAttribute( 'data-mce-bogus', '1' );\n\t\t\t\treturn element;\n\t\t\t},\n\t\t\tprepareEditableTree: this.props.prepareEditableTree,\n\t\t} ).body.innerHTML;\n\t}\n\n\tvalueToFormat( value ) {\n\t\t// Handle deprecated `children` and `node` sources.\n\t\tif ( this.usedDeprecatedChildrenSource ) {\n\t\t\treturn children.fromDOM( unstableToDom( {\n\t\t\t\tvalue,\n\t\t\t\tmultilineTag: this.multilineTag,\n\t\t\t\tmultilineWrapperTags: this.multilineWrapperTags,\n\t\t\t} ).body.childNodes );\n\t\t}\n\n\t\tif ( this.props.format === 'string' ) {\n\t\t\treturn toHTMLString( {\n\t\t\t\tvalue,\n\t\t\t\tmultilineTag: this.multilineTag,\n\t\t\t\tmultilineWrapperTags: this.multilineWrapperTags,\n\t\t\t} );\n\t\t}\n\n\t\treturn value;\n\t}\n\n\trender() {\n\t\tconst {\n\t\t\ttagName: Tagname = 'div',\n\t\t\tstyle,\n\t\t\twrapperClassName,\n\t\t\tclassName,\n\t\t\tinlineToolbar = false,\n\t\t\tformattingControls,\n\t\t\tplaceholder,\n\t\t\tkeepPlaceholderOnFocus = false,\n\t\t\tisSelected,\n\t\t\tautocompleters,\n\t\t} = this.props;\n\n\t\tconst MultilineTag = this.multilineTag;\n\t\tconst ariaProps = pickAriaProps( this.props );\n\n\t\t// Generating a key that includes `tagName` ensures that if the tag\n\t\t// changes, we unmount and destroy the previous TinyMCE element, then\n\t\t// mount and initialize a new child element in its place.\n\t\tconst key = [ 'editor', Tagname ].join();\n\t\tconst isPlaceholderVisible = placeholder && ( ! isSelected || keepPlaceholderOnFocus ) && this.isEmpty();\n\t\tconst classes = classnames( wrapperClassName, 'editor-rich-text' );\n\t\tconst record = this.getRecord();\n\n\t\treturn (\n\t\t\t<div className={ classes }\n\t\t\t\tonFocus={ this.setFocusedElement }\n\t\t\t>\n\t\t\t\t{ isSelected && ! inlineToolbar && (\n\t\t\t\t\t<BlockFormatControls>\n\t\t\t\t\t\t<FormatToolbar controls={ formattingControls } />\n\t\t\t\t\t</BlockFormatControls>\n\t\t\t\t) }\n\t\t\t\t{ isSelected && inlineToolbar && (\n\t\t\t\t\t<div className=\"editor-rich-text__inline-toolbar\">\n\t\t\t\t\t\t<FormatToolbar controls={ formattingControls } />\n\t\t\t\t\t</div>\n\t\t\t\t) }\n\t\t\t\t<Autocomplete\n\t\t\t\t\tonReplace={ this.props.onReplace }\n\t\t\t\t\tcompleters={ autocompleters }\n\t\t\t\t\trecord={ record }\n\t\t\t\t\tonChange={ this.onChange }\n\t\t\t\t>\n\t\t\t\t\t{ ( { isExpanded, listBoxId, activeId } ) => (\n\t\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t\t<TinyMCE\n\t\t\t\t\t\t\t\ttagName={ Tagname }\n\t\t\t\t\t\t\t\tgetSettings={ this.getSettings }\n\t\t\t\t\t\t\t\tonSetup={ this.onSetup }\n\t\t\t\t\t\t\t\tstyle={ style }\n\t\t\t\t\t\t\t\tdefaultValue={ this.valueToEditableHTML( record ) }\n\t\t\t\t\t\t\t\tisPlaceholderVisible={ isPlaceholderVisible }\n\t\t\t\t\t\t\t\taria-label={ placeholder }\n\t\t\t\t\t\t\t\taria-autocomplete=\"list\"\n\t\t\t\t\t\t\t\taria-expanded={ isExpanded }\n\t\t\t\t\t\t\t\taria-owns={ listBoxId }\n\t\t\t\t\t\t\t\taria-activedescendant={ activeId }\n\t\t\t\t\t\t\t\t{ ...ariaProps }\n\t\t\t\t\t\t\t\tclassName={ className }\n\t\t\t\t\t\t\t\tkey={ key }\n\t\t\t\t\t\t\t\tonPaste={ this.onPaste }\n\t\t\t\t\t\t\t\tonInput={ this.onInput }\n\t\t\t\t\t\t\t\tonKeyDown={ this.onKeyDown }\n\t\t\t\t\t\t\t\tonKeyUp={ this.onKeyUp }\n\t\t\t\t\t\t\t\tonFocus={ this.onFocus }\n\t\t\t\t\t\t\t\tmultilineTag={ this.multilineTag }\n\t\t\t\t\t\t\t\tmultilineWrapperTags={ this.multilineWrapperTags }\n\t\t\t\t\t\t\t\tsetRef={ this.setRef }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{ isPlaceholderVisible &&\n\t\t\t\t\t\t\t\t<Tagname\n\t\t\t\t\t\t\t\t\tclassName={ classnames( 'editor-rich-text__tinymce', className ) }\n\t\t\t\t\t\t\t\t\tstyle={ style }\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{ MultilineTag ? <MultilineTag>{ placeholder }</MultilineTag> : placeholder }\n\t\t\t\t\t\t\t\t</Tagname>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t{ isSelected && <FormatEdit value={ record } onChange={ this.onChange } /> }\n\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t) }\n\t\t\t\t</Autocomplete>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nRichText.defaultProps = {\n\tformattingControls: [ 'bold', 'italic', 'link', 'strikethrough' ],\n\tformat: 'string',\n\tvalue: '',\n};\n\nconst RichTextContainer = compose( [\n\twithInstanceId,\n\twithBlockEditContext( ( context, ownProps ) => {\n\t\t// When explicitly set as not selected, do nothing.\n\t\tif ( ownProps.isSelected === false ) {\n\t\t\treturn {\n\t\t\t\tclientId: context.clientId,\n\t\t\t};\n\t\t}\n\t\t// When explicitly set as selected, use the value stored in the context instead.\n\t\tif ( ownProps.isSelected === true ) {\n\t\t\treturn {\n\t\t\t\tisSelected: context.isSelected,\n\t\t\t\tclientId: context.clientId,\n\t\t\t};\n\t\t}\n\n\t\t// Ensures that only one RichText component can be focused.\n\t\treturn {\n\t\t\tisSelected: context.isSelected && context.focusedElement === ownProps.instanceId,\n\t\t\tsetFocusedElement: context.setFocusedElement,\n\t\t\tclientId: context.clientId,\n\t\t};\n\t} ),\n\twithSelect( ( select ) => {\n\t\tconst { isViewportMatch } = select( 'core/viewport' );\n\t\tconst { canUserUseUnfilteredHTML, isCaretWithinFormattedText } = select( 'core/editor' );\n\n\t\treturn {\n\t\t\tisViewportSmall: isViewportMatch( '< small' ),\n\t\t\tcanUserUseUnfilteredHTML: canUserUseUnfilteredHTML(),\n\t\t\tisCaretWithinFormattedText: isCaretWithinFormattedText(),\n\t\t};\n\t} ),\n\twithDispatch( ( dispatch ) => {\n\t\tconst {\n\t\t\tcreateUndoLevel,\n\t\t\tredo,\n\t\t\tundo,\n\t\t\tenterFormattedText,\n\t\t\texitFormattedText,\n\t\t} = dispatch( 'core/editor' );\n\n\t\treturn {\n\t\t\tonCreateUndoLevel: createUndoLevel,\n\t\t\tonRedo: redo,\n\t\t\tonUndo: undo,\n\t\t\tonEnterFormattedText: enterFormattedText,\n\t\t\tonExitFormattedText: exitFormattedText,\n\t\t};\n\t} ),\n\twithSafeTimeout,\n\twithFilters( 'experimentalRichText' ),\n] )( RichText );\n\nRichTextContainer.Content = ( { value, tagName: Tag, multiline, ...props } ) => {\n\tlet html = value;\n\tlet MultilineTag;\n\n\tif ( multiline === true || multiline === 'p' || multiline === 'li' ) {\n\t\tMultilineTag = multiline === true ? 'p' : multiline;\n\t}\n\n\t// Handle deprecated `children` and `node` sources.\n\tif ( Array.isArray( value ) ) {\n\t\thtml = children.toHTML( value );\n\t}\n\n\tif ( ! html && MultilineTag ) {\n\t\thtml = `<${ MultilineTag }></${ MultilineTag }>`;\n\t}\n\n\tconst content = <RawHTML>{ html }</RawHTML>;\n\n\tif ( Tag ) {\n\t\treturn <Tag { ...omit( props, [ 'format' ] ) }>{ content }</Tag>;\n\t}\n\n\treturn content;\n};\n\nRichTextContainer.isEmpty = ( value = '' ) => {\n\t// Handle deprecated `children` and `node` sources.\n\tif ( Array.isArray( value ) ) {\n\t\treturn ! value || value.length === 0;\n\t}\n\n\treturn value.length === 0;\n};\n\nRichTextContainer.Content.defaultProps = {\n\tformat: 'string',\n\tvalue: '',\n};\n\nexport default RichTextContainer;\nexport { RichTextShortcut } from './shortcut';\nexport { RichTextToolbarButton } from './toolbar-button';\nexport { RichTextInserterItem } from './inserter-list-item';\n"]}