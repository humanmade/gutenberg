{"version":3,"sources":["/home/circleci/project/packages/editor/src/components/block-inspector/index.js"],"names":["isEmpty","__","getBlockType","getUnregisteredTypeHandlerName","PanelBody","withSelect","Fragment","SkipToSelectedBlock","BlockIcon","InspectorControls","InspectorAdvancedControls","BlockStyles","BlockInspector","selectedBlock","blockType","count","hasBlockStyles","isSelectedBlockUnregistered","name","icon","title","description","clientId","fills","select","getSelectedBlock","getSelectedBlockCount","getBlockStyles","blockStyles","length"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { isEmpty } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { getBlockType, getUnregisteredTypeHandlerName } from '@wordpress/blocks';\nimport { PanelBody } from '@wordpress/components';\nimport { withSelect } from '@wordpress/data';\nimport { Fragment } from '@wordpress/element';\n\n/**\n * Internal Dependencies\n */\nimport SkipToSelectedBlock from '../skip-to-selected-block';\nimport BlockIcon from '../block-icon';\nimport InspectorControls from '../inspector-controls';\nimport InspectorAdvancedControls from '../inspector-advanced-controls';\nimport BlockStyles from '../block-styles';\n\nconst BlockInspector = ( { selectedBlock, blockType, count, hasBlockStyles } ) => {\n\tif ( count > 1 ) {\n\t\treturn <span className=\"editor-block-inspector__multi-blocks\">{ __( 'Coming Soon' ) }</span>;\n\t}\n\n\tconst isSelectedBlockUnregistered =\n\t\t!! selectedBlock && selectedBlock.name === getUnregisteredTypeHandlerName();\n\n\t/*\n\t * If the selected block is of an unregistered type, avoid showing it as an actual selection\n\t * because we want the user to focus on the unregistered block warning, not block settings.\n\t */\n\tif ( ! selectedBlock || isSelectedBlockUnregistered ) {\n\t\treturn <span className=\"editor-block-inspector__no-blocks\">{ __( 'No block selected.' ) }</span>;\n\t}\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<div className=\"editor-block-inspector__card\">\n\t\t\t\t<BlockIcon icon={ blockType.icon } showColors />\n\t\t\t\t<div className=\"editor-block-inspector__card-content\">\n\t\t\t\t\t<div className=\"editor-block-inspector__card-title\">{ blockType.title }</div>\n\t\t\t\t\t<div className=\"editor-block-inspector__card-description\">{ blockType.description }</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t{ hasBlockStyles && (\n\t\t\t\t<div>\n\t\t\t\t\t<PanelBody\n\t\t\t\t\t\ttitle={ __( 'Styles' ) }\n\t\t\t\t\t\tinitialOpen={ false }\n\t\t\t\t\t>\n\t\t\t\t\t\t<BlockStyles\n\t\t\t\t\t\t\tclientId={ selectedBlock.clientId }\n\t\t\t\t\t\t/>\n\t\t\t\t\t</PanelBody>\n\t\t\t\t</div>\n\t\t\t) }\n\t\t\t<div><InspectorControls.Slot /></div>\n\t\t\t<div>\n\t\t\t\t<InspectorAdvancedControls.Slot>\n\t\t\t\t\t{ ( fills ) => ! isEmpty( fills ) && (\n\t\t\t\t\t\t<PanelBody\n\t\t\t\t\t\t\tclassName=\"editor-block-inspector__advanced\"\n\t\t\t\t\t\t\ttitle={ __( 'Advanced' ) }\n\t\t\t\t\t\t\tinitialOpen={ false }\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{ fills }\n\t\t\t\t\t\t</PanelBody>\n\t\t\t\t\t) }\n\t\t\t\t</InspectorAdvancedControls.Slot>\n\t\t\t</div>\n\t\t\t<SkipToSelectedBlock key=\"back\" />\n\t\t</Fragment>\n\t);\n};\n\nexport default withSelect(\n\t( select ) => {\n\t\tconst { getSelectedBlock, getSelectedBlockCount } = select( 'core/editor' );\n\t\tconst { getBlockStyles } = select( 'core/blocks' );\n\t\tconst selectedBlock = getSelectedBlock();\n\t\tconst blockType = selectedBlock && getBlockType( selectedBlock.name );\n\t\tconst blockStyles = selectedBlock && getBlockStyles( selectedBlock.name );\n\t\treturn {\n\t\t\tcount: getSelectedBlockCount(),\n\t\t\thasBlockStyles: blockStyles && blockStyles.length > 0,\n\t\t\tselectedBlock,\n\t\t\tblockType,\n\t\t};\n\t}\n)( BlockInspector );\n"]}