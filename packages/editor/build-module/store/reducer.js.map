{"version":3,"sources":["/home/circleci/project/packages/editor/src/store/reducer.js"],"names":["optimist","flow","reduce","first","last","omit","without","mapValues","omitBy","keys","isEqual","overSome","get","isReusableBlock","combineReducers","withHistory","withChangeDetection","PREFERENCES_DEFAULTS","EDITOR_SETTINGS_DEFAULTS","INITIAL_EDITS_DEFAULTS","insertAt","moveTo","getPostRawValue","value","raw","mapBlockOrder","blocks","rootClientId","result","forEach","block","clientId","innerBlocks","push","Object","assign","getFlattenedBlocks","flattenedBlocks","stack","length","shift","getMutateSafeObject","original","working","hasSameKeys","a","b","isUpdatingSameBlockAttribute","action","previousAction","type","attributes","isUpdatingSamePostProperty","edits","shouldOverwriteState","withInnerBlocksRemoveCascade","reducer","state","clientIds","i","order","editor","resetTypes","ignoreTypes","key","getCanonicalValue","post","byClientId","nextAttributes","updates","id","updatedId","name","ref","subState","mappedBlocks","index","fromRootClientId","toRootClientId","fromIndex","indexOf","firstClientId","firstIndex","lastClientId","nextState","initialEdits","hasOwnProperty","currentPost","isTyping","isCaretWithinFormattedText","blockSelection","start","end","isMultiSelecting","isEnabled","initialPosition","updateSelection","nextSelectedBlockClientId","isSelectionEnabled","blocksMode","insertionPoint","template","isValid","settings","preferences","prevState","insert","insertUsage","time","count","isPublishSidebarEnabled","saving","requesting","successful","error","isAutosave","postLock","isLocked","lock","postSavingLock","lockName","reusableBlocks","data","results","reusableBlock","title","parsedBlock","isFetching","isSaving","blockListSettings","autosave","map","field","excerpt","content","preview_link","options"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport optimist from 'redux-optimist';\nimport {\n\tflow,\n\treduce,\n\tfirst,\n\tlast,\n\tomit,\n\twithout,\n\tmapValues,\n\tomitBy,\n\tkeys,\n\tisEqual,\n\toverSome,\n\tget,\n} from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { isReusableBlock } from '@wordpress/blocks';\nimport { combineReducers } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport withHistory from '../utils/with-history';\nimport withChangeDetection from '../utils/with-change-detection';\nimport {\n\tPREFERENCES_DEFAULTS,\n\tEDITOR_SETTINGS_DEFAULTS,\n\tINITIAL_EDITS_DEFAULTS,\n} from './defaults';\nimport { insertAt, moveTo } from './array';\n\n/**\n * Returns a post attribute value, flattening nested rendered content using its\n * raw value in place of its original object form.\n *\n * @param {*} value Original value.\n *\n * @return {*} Raw value.\n */\nexport function getPostRawValue( value ) {\n\tif ( value && 'object' === typeof value && 'raw' in value ) {\n\t\treturn value.raw;\n\t}\n\n\treturn value;\n}\n\n/**\n * Given an array of blocks, returns an object where each key is a nesting\n * context, the value of which is an array of block client IDs existing within\n * that nesting context.\n *\n * @param {Array}   blocks       Blocks to map.\n * @param {?string} rootClientId Assumed root client ID.\n *\n * @return {Object} Block order map object.\n */\nfunction mapBlockOrder( blocks, rootClientId = '' ) {\n\tconst result = { [ rootClientId ]: [] };\n\n\tblocks.forEach( ( block ) => {\n\t\tconst { clientId, innerBlocks } = block;\n\n\t\tresult[ rootClientId ].push( clientId );\n\n\t\tObject.assign( result, mapBlockOrder( innerBlocks, clientId ) );\n\t} );\n\n\treturn result;\n}\n\n/**\n * Given an array of blocks, returns an object containing all blocks, recursing\n * into inner blocks. Keys correspond to the block client ID, the value of\n * which is the block object.\n *\n * @param {Array} blocks Blocks to flatten.\n *\n * @return {Object} Flattened blocks object.\n */\nfunction getFlattenedBlocks( blocks ) {\n\tconst flattenedBlocks = {};\n\n\tconst stack = [ ...blocks ];\n\twhile ( stack.length ) {\n\t\t// `innerBlocks` is redundant data which can fall out of sync, since\n\t\t// this is reflected in `blocks.order`, so exclude from appended block.\n\t\tconst { innerBlocks, ...block } = stack.shift();\n\n\t\tstack.push( ...innerBlocks );\n\n\t\tflattenedBlocks[ block.clientId ] = block;\n\t}\n\n\treturn flattenedBlocks;\n}\n\n/**\n * Returns an object against which it is safe to perform mutating operations,\n * given the original object and its current working copy.\n *\n * @param {Object} original Original object.\n * @param {Object} working  Working object.\n *\n * @return {Object} Mutation-safe object.\n */\nfunction getMutateSafeObject( original, working ) {\n\tif ( original === working ) {\n\t\treturn { ...original };\n\t}\n\n\treturn working;\n}\n\n/**\n * Returns true if the two object arguments have the same keys, or false\n * otherwise.\n *\n * @param {Object} a First object.\n * @param {Object} b Second object.\n *\n * @return {boolean} Whether the two objects have the same keys.\n */\nexport function hasSameKeys( a, b ) {\n\treturn isEqual( keys( a ), keys( b ) );\n}\n\n/**\n * Returns true if, given the currently dispatching action and the previously\n * dispatched action, the two actions are updating the same block attribute, or\n * false otherwise.\n *\n * @param {Object} action         Currently dispatching action.\n * @param {Object} previousAction Previously dispatched action.\n *\n * @return {boolean} Whether actions are updating the same block attribute.\n */\nexport function isUpdatingSameBlockAttribute( action, previousAction ) {\n\treturn (\n\t\taction.type === 'UPDATE_BLOCK_ATTRIBUTES' &&\n\t\taction.clientId === previousAction.clientId &&\n\t\thasSameKeys( action.attributes, previousAction.attributes )\n\t);\n}\n\n/**\n * Returns true if, given the currently dispatching action and the previously\n * dispatched action, the two actions are editing the same post property, or\n * false otherwise.\n *\n * @param {Object} action         Currently dispatching action.\n * @param {Object} previousAction Previously dispatched action.\n *\n * @return {boolean} Whether actions are updating the same post property.\n */\nexport function isUpdatingSamePostProperty( action, previousAction ) {\n\treturn (\n\t\taction.type === 'EDIT_POST' &&\n\t\thasSameKeys( action.edits, previousAction.edits )\n\t);\n}\n\n/**\n * Returns true if, given the currently dispatching action and the previously\n * dispatched action, the two actions are modifying the same property such that\n * undo history should be batched.\n *\n * @param {Object} action         Currently dispatching action.\n * @param {Object} previousAction Previously dispatched action.\n *\n * @return {boolean} Whether to overwrite present state.\n */\nexport function shouldOverwriteState( action, previousAction ) {\n\tif ( ! previousAction || action.type !== previousAction.type ) {\n\t\treturn false;\n\t}\n\n\treturn overSome( [\n\t\tisUpdatingSameBlockAttribute,\n\t\tisUpdatingSamePostProperty,\n\t] )( action, previousAction );\n}\n\n/**\n * Higher-order reducer targeting the combined editor reducer, augmenting\n * block client IDs in remove action to include cascade of inner blocks.\n *\n * @param {Function} reducer Original reducer function.\n *\n * @return {Function} Enhanced reducer function.\n */\nconst withInnerBlocksRemoveCascade = ( reducer ) => ( state, action ) => {\n\tif ( state && action.type === 'REMOVE_BLOCKS' ) {\n\t\tconst clientIds = [ ...action.clientIds ];\n\n\t\t// For each removed client ID, include its inner blocks to remove,\n\t\t// recursing into those so long as inner blocks exist.\n\t\tfor ( let i = 0; i < clientIds.length; i++ ) {\n\t\t\tclientIds.push( ...state.blocks.order[ clientIds[ i ] ] );\n\t\t}\n\n\t\taction = { ...action, clientIds };\n\t}\n\n\treturn reducer( state, action );\n};\n\n/**\n * Undoable reducer returning the editor post state, including blocks parsed\n * from current HTML markup.\n *\n * Handles the following state keys:\n *  - edits: an object describing changes to be made to the current post, in\n *           the format accepted by the WP REST API\n *  - blocks: post content blocks\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @returns {Object} Updated state.\n */\nexport const editor = flow( [\n\tcombineReducers,\n\n\twithInnerBlocksRemoveCascade,\n\n\t// Track undo history, starting at editor initialization.\n\twithHistory( {\n\t\tresetTypes: [ 'SETUP_EDITOR_STATE' ],\n\t\tignoreTypes: [ 'RECEIVE_BLOCKS', 'RESET_POST', 'UPDATE_POST' ],\n\t\tshouldOverwriteState,\n\t} ),\n] )( {\n\tedits( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'EDIT_POST':\n\t\t\t\treturn reduce( action.edits, ( result, value, key ) => {\n\t\t\t\t\t// Only assign into result if not already same value\n\t\t\t\t\tif ( value !== state[ key ] ) {\n\t\t\t\t\t\tresult = getMutateSafeObject( state, result );\n\t\t\t\t\t\tresult[ key ] = value;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn result;\n\t\t\t\t}, state );\n\n\t\t\tcase 'RESET_BLOCKS':\n\t\t\t\tif ( 'content' in state ) {\n\t\t\t\t\treturn omit( state, 'content' );\n\t\t\t\t}\n\n\t\t\t\treturn state;\n\n\t\t\tcase 'UPDATE_POST':\n\t\t\tcase 'RESET_POST':\n\t\t\t\tconst getCanonicalValue = action.type === 'UPDATE_POST' ?\n\t\t\t\t\t( key ) => action.edits[ key ] :\n\t\t\t\t\t( key ) => getPostRawValue( action.post[ key ] );\n\n\t\t\t\treturn reduce( state, ( result, value, key ) => {\n\t\t\t\t\tif ( value !== getCanonicalValue( key ) ) {\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\n\t\t\t\t\tresult = getMutateSafeObject( state, result );\n\t\t\t\t\tdelete result[ key ];\n\t\t\t\t\treturn result;\n\t\t\t\t}, state );\n\t\t}\n\n\t\treturn state;\n\t},\n\n\tblocks: flow( [\n\t\tcombineReducers,\n\n\t\t// Track whether changes exist, resetting at each post save. Relies on\n\t\t// editor initialization firing post reset as an effect.\n\t\twithChangeDetection( {\n\t\t\tresetTypes: [ 'SETUP_EDITOR_STATE', 'REQUEST_POST_UPDATE_START' ],\n\t\t\tignoreTypes: [ 'RECEIVE_BLOCKS', 'RESET_POST', 'UPDATE_POST' ],\n\t\t} ),\n\t] )( {\n\t\tbyClientId( state = {}, action ) {\n\t\t\tswitch ( action.type ) {\n\t\t\t\tcase 'RESET_BLOCKS':\n\t\t\t\tcase 'SETUP_EDITOR_STATE':\n\t\t\t\t\treturn getFlattenedBlocks( action.blocks );\n\n\t\t\t\tcase 'RECEIVE_BLOCKS':\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...state,\n\t\t\t\t\t\t...getFlattenedBlocks( action.blocks ),\n\t\t\t\t\t};\n\n\t\t\t\tcase 'UPDATE_BLOCK_ATTRIBUTES':\n\t\t\t\t\t// Ignore updates if block isn't known\n\t\t\t\t\tif ( ! state[ action.clientId ] ) {\n\t\t\t\t\t\treturn state;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Consider as updates only changed values\n\t\t\t\t\tconst nextAttributes = reduce( action.attributes, ( result, value, key ) => {\n\t\t\t\t\t\tif ( value !== result[ key ] ) {\n\t\t\t\t\t\t\tresult = getMutateSafeObject( state[ action.clientId ].attributes, result );\n\t\t\t\t\t\t\tresult[ key ] = value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}, state[ action.clientId ].attributes );\n\n\t\t\t\t\t// Skip update if nothing has been changed. The reference will\n\t\t\t\t\t// match the original block if `reduce` had no changed values.\n\t\t\t\t\tif ( nextAttributes === state[ action.clientId ].attributes ) {\n\t\t\t\t\t\treturn state;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Otherwise merge attributes into state\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...state,\n\t\t\t\t\t\t[ action.clientId ]: {\n\t\t\t\t\t\t\t...state[ action.clientId ],\n\t\t\t\t\t\t\tattributes: nextAttributes,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\n\t\t\t\tcase 'UPDATE_BLOCK':\n\t\t\t\t\t// Ignore updates if block isn't known\n\t\t\t\t\tif ( ! state[ action.clientId ] ) {\n\t\t\t\t\t\treturn state;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...state,\n\t\t\t\t\t\t[ action.clientId ]: {\n\t\t\t\t\t\t\t...state[ action.clientId ],\n\t\t\t\t\t\t\t...action.updates,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\n\t\t\t\tcase 'INSERT_BLOCKS':\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...state,\n\t\t\t\t\t\t...getFlattenedBlocks( action.blocks ),\n\t\t\t\t\t};\n\n\t\t\t\tcase 'REPLACE_BLOCKS':\n\t\t\t\t\tif ( ! action.blocks ) {\n\t\t\t\t\t\treturn state;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...omit( state, action.clientIds ),\n\t\t\t\t\t\t...getFlattenedBlocks( action.blocks ),\n\t\t\t\t\t};\n\n\t\t\t\tcase 'REMOVE_BLOCKS':\n\t\t\t\t\treturn omit( state, action.clientIds );\n\n\t\t\t\tcase 'SAVE_REUSABLE_BLOCK_SUCCESS': {\n\t\t\t\t\tconst { id, updatedId } = action;\n\n\t\t\t\t\t// If a temporary reusable block is saved, we swap the temporary id with the final one\n\t\t\t\t\tif ( id === updatedId ) {\n\t\t\t\t\t\treturn state;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn mapValues( state, ( block ) => {\n\t\t\t\t\t\tif ( block.name === 'core/block' && block.attributes.ref === id ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...block,\n\t\t\t\t\t\t\t\tattributes: {\n\t\t\t\t\t\t\t\t\t...block.attributes,\n\t\t\t\t\t\t\t\t\tref: updatedId,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn block;\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn state;\n\t\t},\n\n\t\torder( state = {}, action ) {\n\t\t\tswitch ( action.type ) {\n\t\t\t\tcase 'RESET_BLOCKS':\n\t\t\t\tcase 'SETUP_EDITOR_STATE':\n\t\t\t\t\treturn mapBlockOrder( action.blocks );\n\n\t\t\t\tcase 'RECEIVE_BLOCKS':\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...state,\n\t\t\t\t\t\t...omit( mapBlockOrder( action.blocks ), '' ),\n\t\t\t\t\t};\n\n\t\t\t\tcase 'INSERT_BLOCKS': {\n\t\t\t\t\tconst { rootClientId = '', blocks } = action;\n\t\t\t\t\tconst subState = state[ rootClientId ] || [];\n\t\t\t\t\tconst mappedBlocks = mapBlockOrder( blocks, rootClientId );\n\t\t\t\t\tconst { index = subState.length } = action;\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...state,\n\t\t\t\t\t\t...mappedBlocks,\n\t\t\t\t\t\t[ rootClientId ]: insertAt( subState, mappedBlocks[ rootClientId ], index ),\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tcase 'MOVE_BLOCK_TO_POSITION': {\n\t\t\t\t\tconst { fromRootClientId = '', toRootClientId = '', clientId } = action;\n\t\t\t\t\tconst { index = state[ toRootClientId ].length } = action;\n\n\t\t\t\t\t// Moving inside the same parent block\n\t\t\t\t\tif ( fromRootClientId === toRootClientId ) {\n\t\t\t\t\t\tconst subState = state[ toRootClientId ];\n\t\t\t\t\t\tconst fromIndex = subState.indexOf( clientId );\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t[ toRootClientId ]: moveTo( state[ toRootClientId ], fromIndex, index ),\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Moving from a parent block to another\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...state,\n\t\t\t\t\t\t[ fromRootClientId ]: without( state[ fromRootClientId ], clientId ),\n\t\t\t\t\t\t[ toRootClientId ]: insertAt( state[ toRootClientId ], clientId, index ),\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tcase 'MOVE_BLOCKS_UP': {\n\t\t\t\t\tconst { clientIds, rootClientId = '' } = action;\n\t\t\t\t\tconst firstClientId = first( clientIds );\n\t\t\t\t\tconst subState = state[ rootClientId ];\n\n\t\t\t\t\tif ( ! subState.length || firstClientId === first( subState ) ) {\n\t\t\t\t\t\treturn state;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst firstIndex = subState.indexOf( firstClientId );\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...state,\n\t\t\t\t\t\t[ rootClientId ]: moveTo( subState, firstIndex, firstIndex - 1, clientIds.length ),\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tcase 'MOVE_BLOCKS_DOWN': {\n\t\t\t\t\tconst { clientIds, rootClientId = '' } = action;\n\t\t\t\t\tconst firstClientId = first( clientIds );\n\t\t\t\t\tconst lastClientId = last( clientIds );\n\t\t\t\t\tconst subState = state[ rootClientId ];\n\n\t\t\t\t\tif ( ! subState.length || lastClientId === last( subState ) ) {\n\t\t\t\t\t\treturn state;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst firstIndex = subState.indexOf( firstClientId );\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...state,\n\t\t\t\t\t\t[ rootClientId ]: moveTo( subState, firstIndex, firstIndex + 1, clientIds.length ),\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tcase 'REPLACE_BLOCKS': {\n\t\t\t\t\tconst { blocks, clientIds } = action;\n\t\t\t\t\tif ( ! blocks ) {\n\t\t\t\t\t\treturn state;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst mappedBlocks = mapBlockOrder( blocks );\n\n\t\t\t\t\treturn flow( [\n\t\t\t\t\t\t( nextState ) => omit( nextState, clientIds ),\n\t\t\t\t\t\t( nextState ) => ( {\n\t\t\t\t\t\t\t...nextState,\n\t\t\t\t\t\t\t...omit( mappedBlocks, '' ),\n\t\t\t\t\t\t} ),\n\t\t\t\t\t\t( nextState ) => mapValues( nextState, ( subState ) => (\n\t\t\t\t\t\t\treduce( subState, ( result, clientId ) => {\n\t\t\t\t\t\t\t\tif ( clientId === clientIds[ 0 ] ) {\n\t\t\t\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\t\t\t\t...result,\n\t\t\t\t\t\t\t\t\t\t...mappedBlocks[ '' ],\n\t\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( clientIds.indexOf( clientId ) === -1 ) {\n\t\t\t\t\t\t\t\t\tresult.push( clientId );\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t\t}, [] )\n\t\t\t\t\t\t) ),\n\t\t\t\t\t] )( state );\n\t\t\t\t}\n\n\t\t\t\tcase 'REMOVE_BLOCKS':\n\t\t\t\t\treturn flow( [\n\t\t\t\t\t\t// Remove inner block ordering for removed blocks\n\t\t\t\t\t\t( nextState ) => omit( nextState, action.clientIds ),\n\n\t\t\t\t\t\t// Remove deleted blocks from other blocks' orderings\n\t\t\t\t\t\t( nextState ) => mapValues( nextState, ( subState ) => (\n\t\t\t\t\t\t\twithout( subState, ...action.clientIds )\n\t\t\t\t\t\t) ),\n\t\t\t\t\t] )( state );\n\t\t\t}\n\n\t\t\treturn state;\n\t\t},\n\t} ),\n} );\n\n/**\n * Reducer returning the initial edits state. With matching shape to that of\n * `editor.edits`, the initial edits are those applied programmatically, are\n * not considered in prmopting the user for unsaved changes, and are included\n * in (and reset by) the next save payload.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Action object.\n *\n * @return {Object} Next state.\n */\nexport function initialEdits( state = INITIAL_EDITS_DEFAULTS, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SETUP_EDITOR':\n\t\t\tif ( ! action.edits ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn action.edits;\n\n\t\tcase 'SETUP_EDITOR_STATE':\n\t\t\tif ( 'content' in state ) {\n\t\t\t\treturn omit( state, 'content' );\n\t\t\t}\n\n\t\t\treturn state;\n\n\t\tcase 'UPDATE_POST':\n\t\t\treturn reduce( action.edits, ( result, value, key ) => {\n\t\t\t\tif ( ! result.hasOwnProperty( key ) ) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tresult = getMutateSafeObject( state, result );\n\t\t\t\tdelete result[ key ];\n\t\t\t\treturn result;\n\t\t\t}, state );\n\n\t\tcase 'RESET_POST':\n\t\t\treturn INITIAL_EDITS_DEFAULTS;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the last-known state of the current post, in the format\n * returned by the WP REST API.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function currentPost( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SETUP_EDITOR_STATE':\n\t\tcase 'RESET_POST':\n\t\tcase 'UPDATE_POST':\n\t\t\tlet post;\n\t\t\tif ( action.post ) {\n\t\t\t\tpost = action.post;\n\t\t\t} else if ( action.edits ) {\n\t\t\t\tpost = {\n\t\t\t\t\t...state,\n\t\t\t\t\t...action.edits,\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn mapValues( post, getPostRawValue );\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning typing state.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isTyping( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'START_TYPING':\n\t\t\treturn true;\n\n\t\tcase 'STOP_TYPING':\n\t\t\treturn false;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning whether the caret is within formatted text.\n *\n * @param {boolean} state  Current state.\n * @param {Object}  action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function isCaretWithinFormattedText( state = false, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'ENTER_FORMATTED_TEXT':\n\t\t\treturn true;\n\n\t\tcase 'EXIT_FORMATTED_TEXT':\n\t\t\treturn false;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the block selection's state.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function blockSelection( state = {\n\tstart: null,\n\tend: null,\n\tisMultiSelecting: false,\n\tisEnabled: true,\n\tinitialPosition: null,\n}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'CLEAR_SELECTED_BLOCK':\n\t\t\tif ( state.start === null && state.end === null && ! state.isMultiSelecting ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tstart: null,\n\t\t\t\tend: null,\n\t\t\t\tisMultiSelecting: false,\n\t\t\t\tinitialPosition: null,\n\t\t\t};\n\t\tcase 'START_MULTI_SELECT':\n\t\t\tif ( state.isMultiSelecting ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisMultiSelecting: true,\n\t\t\t\tinitialPosition: null,\n\t\t\t};\n\t\tcase 'STOP_MULTI_SELECT':\n\t\t\tif ( ! state.isMultiSelecting ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisMultiSelecting: false,\n\t\t\t\tinitialPosition: null,\n\t\t\t};\n\t\tcase 'MULTI_SELECT':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tstart: action.start,\n\t\t\t\tend: action.end,\n\t\t\t\tinitialPosition: null,\n\t\t\t};\n\t\tcase 'SELECT_BLOCK':\n\t\t\tif ( action.clientId === state.start && action.clientId === state.end ) {\n\t\t\t\treturn state;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tstart: action.clientId,\n\t\t\t\tend: action.clientId,\n\t\t\t\tinitialPosition: action.initialPosition,\n\t\t\t};\n\t\tcase 'INSERT_BLOCKS': {\n\t\t\tif ( action.updateSelection ) {\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\tstart: action.blocks[ 0 ].clientId,\n\t\t\t\t\tend: action.blocks[ 0 ].clientId,\n\t\t\t\t\tinitialPosition: null,\n\t\t\t\t\tisMultiSelecting: false,\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn state;\n\t\t}\n\t\tcase 'REMOVE_BLOCKS':\n\t\t\tif ( ! action.clientIds || ! action.clientIds.length || action.clientIds.indexOf( state.start ) === -1 ) {\n\t\t\t\treturn state;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tstart: null,\n\t\t\t\tend: null,\n\t\t\t\tinitialPosition: null,\n\t\t\t\tisMultiSelecting: false,\n\t\t\t};\n\t\tcase 'REPLACE_BLOCKS':\n\t\t\tif ( action.clientIds.indexOf( state.start ) === -1 ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\t// If there is replacement block(s), assign first's client ID as\n\t\t\t// the next selected block. If empty replacement, reset to null.\n\t\t\tconst nextSelectedBlockClientId = get( action.blocks, [ 0, 'clientId' ], null );\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tstart: nextSelectedBlockClientId,\n\t\t\t\tend: nextSelectedBlockClientId,\n\t\t\t\tinitialPosition: null,\n\t\t\t\tisMultiSelecting: false,\n\t\t\t};\n\t\tcase 'TOGGLE_SELECTION':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisEnabled: action.isSelectionEnabled,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\nexport function blocksMode( state = {}, action ) {\n\tif ( action.type === 'TOGGLE_BLOCK_MODE' ) {\n\t\tconst { clientId } = action;\n\t\treturn {\n\t\t\t...state,\n\t\t\t[ clientId ]: state[ clientId ] && state[ clientId ] === 'html' ? 'visual' : 'html',\n\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the block insertion point visibility, either null if there\n * is not an explicit insertion point assigned, or an object of its `index` and\n * `rootClientId`.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function insertionPoint( state = null, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SHOW_INSERTION_POINT':\n\t\t\tconst { rootClientId, index } = action;\n\t\t\treturn { rootClientId, index };\n\n\t\tcase 'HIDE_INSERTION_POINT':\n\t\t\treturn null;\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning whether the post blocks match the defined template or not.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {boolean} Updated state.\n */\nexport function template( state = { isValid: true }, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SET_TEMPLATE_VALIDITY':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisValid: action.isValid,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the editor setting.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function settings( state = EDITOR_SETTINGS_DEFAULTS, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'UPDATE_EDITOR_SETTINGS':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t...action.settings,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning the user preferences.\n *\n * @param {Object}  state                 Current state.\n * @param {Object}  action                Dispatched action.\n *\n * @return {string} Updated state.\n */\nexport function preferences( state = PREFERENCES_DEFAULTS, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'INSERT_BLOCKS':\n\t\tcase 'REPLACE_BLOCKS':\n\t\t\treturn action.blocks.reduce( ( prevState, block ) => {\n\t\t\t\tlet id = block.name;\n\t\t\t\tconst insert = { name: block.name };\n\t\t\t\tif ( isReusableBlock( block ) ) {\n\t\t\t\t\tinsert.ref = block.attributes.ref;\n\t\t\t\t\tid += '/' + block.attributes.ref;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...prevState,\n\t\t\t\t\tinsertUsage: {\n\t\t\t\t\t\t...prevState.insertUsage,\n\t\t\t\t\t\t[ id ]: {\n\t\t\t\t\t\t\ttime: action.time,\n\t\t\t\t\t\t\tcount: prevState.insertUsage[ id ] ? prevState.insertUsage[ id ].count + 1 : 1,\n\t\t\t\t\t\t\tinsert,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}, state );\n\n\t\tcase 'REMOVE_REUSABLE_BLOCK':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tinsertUsage: omitBy( state.insertUsage, ( { insert } ) => insert.ref === action.id ),\n\t\t\t};\n\n\t\tcase 'ENABLE_PUBLISH_SIDEBAR':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisPublishSidebarEnabled: true,\n\t\t\t};\n\n\t\tcase 'DISABLE_PUBLISH_SIDEBAR':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisPublishSidebarEnabled: false,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Reducer returning current network request state (whether a request to\n * the WP REST API is in progress, successful, or failed).\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function saving( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'REQUEST_POST_UPDATE_START':\n\t\t\treturn {\n\t\t\t\trequesting: true,\n\t\t\t\tsuccessful: false,\n\t\t\t\terror: null,\n\t\t\t\tisAutosave: action.isAutosave,\n\t\t\t};\n\n\t\tcase 'REQUEST_POST_UPDATE_SUCCESS':\n\t\t\treturn {\n\t\t\t\trequesting: false,\n\t\t\t\tsuccessful: true,\n\t\t\t\terror: null,\n\t\t\t};\n\n\t\tcase 'REQUEST_POST_UPDATE_FAILURE':\n\t\t\treturn {\n\t\t\t\trequesting: false,\n\t\t\t\tsuccessful: false,\n\t\t\t\terror: action.error,\n\t\t\t};\n\t}\n\n\treturn state;\n}\n\n/**\n * Post Lock State.\n *\n * @typedef {Object} PostLockState\n *\n * @property {boolean} isLocked       Whether the post is locked.\n * @property {?boolean} isTakeover     Whether the post editing has been taken over.\n * @property {?boolean} activePostLock Active post lock value.\n * @property {?Object}  user           User that took over the post.\n */\n\n/**\n * Reducer returning the post lock status.\n *\n * @param {PostLockState} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {PostLockState} Updated state.\n */\nexport function postLock( state = { isLocked: false }, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'UPDATE_POST_LOCK':\n\t\t\treturn action.lock;\n\t}\n\n\treturn state;\n}\n\n/**\n * Post saving lock.\n *\n * When post saving is locked, the post cannot be published or updated.\n *\n * @param {PostSavingLockState} state  Current state.\n * @param {Object}              action Dispatched action.\n *\n * @return {PostLockState} Updated state.\n */\nexport function postSavingLock( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'LOCK_POST_SAVING':\n\t\t\treturn { ...state, [ action.lockName ]: true };\n\n\t\tcase 'UNLOCK_POST_SAVING':\n\t\t\treturn omit( state, action.lockName );\n\t}\n\treturn state;\n}\n\nexport const reusableBlocks = combineReducers( {\n\tdata( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'RECEIVE_REUSABLE_BLOCKS': {\n\t\t\t\treturn reduce( action.results, ( nextState, result ) => {\n\t\t\t\t\tconst { id, title } = result.reusableBlock;\n\t\t\t\t\tconst { clientId } = result.parsedBlock;\n\n\t\t\t\t\tconst value = { clientId, title };\n\n\t\t\t\t\tif ( ! isEqual( nextState[ id ], value ) ) {\n\t\t\t\t\t\tnextState = getMutateSafeObject( state, nextState );\n\t\t\t\t\t\tnextState[ id ] = value;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn nextState;\n\t\t\t\t}, state );\n\t\t\t}\n\n\t\t\tcase 'UPDATE_REUSABLE_BLOCK_TITLE': {\n\t\t\t\tconst { id, title } = action;\n\n\t\t\t\tif ( ! state[ id ] || state[ id ].title === title ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ id ]: {\n\t\t\t\t\t\t...state[ id ],\n\t\t\t\t\t\ttitle,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'SAVE_REUSABLE_BLOCK_SUCCESS': {\n\t\t\t\tconst { id, updatedId } = action;\n\n\t\t\t\t// If a temporary reusable block is saved, we swap the temporary id with the final one\n\t\t\t\tif ( id === updatedId ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\tconst value = state[ id ];\n\t\t\t\treturn {\n\t\t\t\t\t...omit( state, id ),\n\t\t\t\t\t[ updatedId ]: value,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'REMOVE_REUSABLE_BLOCK': {\n\t\t\t\tconst { id } = action;\n\t\t\t\treturn omit( state, id );\n\t\t\t}\n\t\t}\n\n\t\treturn state;\n\t},\n\n\tisFetching( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'FETCH_REUSABLE_BLOCKS': {\n\t\t\t\tconst { id } = action;\n\t\t\t\tif ( ! id ) {\n\t\t\t\t\treturn state;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ id ]: true,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcase 'FETCH_REUSABLE_BLOCKS_SUCCESS':\n\t\t\tcase 'FETCH_REUSABLE_BLOCKS_FAILURE': {\n\t\t\t\tconst { id } = action;\n\t\t\t\treturn omit( state, id );\n\t\t\t}\n\t\t}\n\n\t\treturn state;\n\t},\n\n\tisSaving( state = {}, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'SAVE_REUSABLE_BLOCK':\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\t[ action.id ]: true,\n\t\t\t\t};\n\n\t\t\tcase 'SAVE_REUSABLE_BLOCK_SUCCESS':\n\t\t\tcase 'SAVE_REUSABLE_BLOCK_FAILURE': {\n\t\t\t\tconst { id } = action;\n\t\t\t\treturn omit( state, id );\n\t\t\t}\n\t\t}\n\n\t\treturn state;\n\t},\n} );\n\n/**\n * Reducer returning an object where each key is a block client ID, its value\n * representing the settings for its nested blocks.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport const blockListSettings = ( state = {}, action ) => {\n\tswitch ( action.type ) {\n\t\t// Even if the replaced blocks have the same client ID, our logic\n\t\t// should correct the state.\n\t\tcase 'REPLACE_BLOCKS' :\n\t\tcase 'REMOVE_BLOCKS': {\n\t\t\treturn omit( state, action.clientIds );\n\t\t}\n\t\tcase 'UPDATE_BLOCK_LIST_SETTINGS': {\n\t\t\tconst { clientId } = action;\n\t\t\tif ( ! action.settings ) {\n\t\t\t\tif ( state.hasOwnProperty( clientId ) ) {\n\t\t\t\t\treturn omit( state, clientId );\n\t\t\t\t}\n\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\tif ( isEqual( state[ clientId ], action.settings ) ) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ clientId ]: action.settings,\n\t\t\t};\n\t\t}\n\t}\n\treturn state;\n};\n\n/**\n * Reducer returning the most recent autosave.\n *\n * @param  {Object} state  The autosave object.\n * @param  {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nexport function autosave( state = null, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'RESET_AUTOSAVE':\n\t\t\tconst { post } = action;\n\t\t\tconst [ title, excerpt, content ] = [\n\t\t\t\t'title',\n\t\t\t\t'excerpt',\n\t\t\t\t'content',\n\t\t\t].map( ( field ) => getPostRawValue( post[ field ] ) );\n\n\t\t\treturn {\n\t\t\t\ttitle,\n\t\t\t\texcerpt,\n\t\t\t\tcontent,\n\t\t\t\tpreview_link: post.preview_link,\n\t\t\t};\n\n\t\tcase 'REQUEST_POST_UPDATE':\n\t\t\t// Invalidate known preview link when autosave starts.\n\t\t\tif ( state && action.options.autosave ) {\n\t\t\t\treturn omit( state, 'preview_link' );\n\t\t\t}\n\t\t\tbreak;\n\t}\n\n\treturn state;\n}\n\nexport default optimist( combineReducers( {\n\teditor,\n\tinitialEdits,\n\tcurrentPost,\n\tisTyping,\n\tisCaretWithinFormattedText,\n\tblockSelection,\n\tblocksMode,\n\tblockListSettings,\n\tinsertionPoint,\n\tpreferences,\n\tsaving,\n\tpostLock,\n\treusableBlocks,\n\ttemplate,\n\tautosave,\n\tsettings,\n\tpostSavingLock,\n} ) );\n"]}