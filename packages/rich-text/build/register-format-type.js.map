{"version":3,"sources":["/home/circleci/project/packages/rich-text/src/register-format-type.js"],"names":["registerFormatType","name","settings","window","console","error","test","getFormatType","tagName","className","formatTypeForBareElement","getFormatTypeForBareElement","formatTypeForClassName","getFormatTypeForClassName","title","keywords","length","addFormatTypes","__experimentalCreatePrepareEditableTree","__experimentalGetPropsForEditableTreePreparation","OriginalComponent","sel","clientId","identifier","richTextIdentifier","blockClientId","props","prepareEditableTree"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { select, dispatch, withSelect } from '@wordpress/data';\nimport { addFilter } from '@wordpress/hooks';\n\n/**\n * Registers a new format provided a unique name and an object defining its\n * behavior.\n *\n * @param {string} name     Format name.\n * @param {Object} settings Format settings.\n *\n * @return {?WPFormat} The format, if it has been successfully registered;\n *                     otherwise `undefined`.\n */\nexport function registerFormatType( name, settings ) {\n\tsettings = {\n\t\tname,\n\t\t...settings,\n\t};\n\n\tif ( typeof settings.name !== 'string' ) {\n\t\twindow.console.error(\n\t\t\t'Format names must be strings.'\n\t\t);\n\t\treturn;\n\t}\n\n\tif ( ! /^[a-z][a-z0-9-]*\\/[a-z][a-z0-9-]*$/.test( settings.name ) ) {\n\t\twindow.console.error(\n\t\t\t'Format names must contain a namespace prefix, include only lowercase alphanumeric characters or dashes, and start with a letter. Example: my-plugin/my-custom-format'\n\t\t);\n\t\treturn;\n\t}\n\n\tif ( select( 'core/rich-text' ).getFormatType( settings.name ) ) {\n\t\twindow.console.error(\n\t\t\t'Format \"' + settings.name + '\" is already registered.'\n\t\t);\n\t\treturn;\n\t}\n\n\tif (\n\t\ttypeof settings.tagName !== 'string' ||\n\t\tsettings.tagName === ''\n\t) {\n\t\twindow.console.error(\n\t\t\t'Format tag names must be a string.'\n\t\t);\n\t\treturn;\n\t}\n\n\tif (\n\t\t( typeof settings.className !== 'string' || settings.className === '' ) &&\n\t\tsettings.className !== null\n\t) {\n\t\twindow.console.error(\n\t\t\t'Format class names must be a string, or null to handle bare elements.'\n\t\t);\n\t\treturn;\n\t}\n\n\tif ( ! /^[_a-zA-Z]+[a-zA-Z0-9-]*$/.test( settings.className ) ) {\n\t\twindow.console.error(\n\t\t\t'A class name must begin with a letter, followed by any number of hyphens, letters, or numbers.'\n\t\t);\n\t\treturn;\n\t}\n\n\tif ( settings.className === null ) {\n\t\tconst formatTypeForBareElement = select( 'core/rich-text' )\n\t\t\t.getFormatTypeForBareElement( settings.tagName );\n\n\t\tif ( formatTypeForBareElement ) {\n\t\t\twindow.console.error(\n\t\t\t\t`Format \"${ formatTypeForBareElement.name }\" is already registered to handle bare tag name \"${ settings.tagName }\".`\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t} else {\n\t\tconst formatTypeForClassName = select( 'core/rich-text' )\n\t\t\t.getFormatTypeForClassName( settings.className );\n\n\t\tif ( formatTypeForClassName ) {\n\t\t\twindow.console.error(\n\t\t\t\t`Format \"${ formatTypeForClassName.name }\" is already registered to handle class name \"${ settings.className }\".`\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif ( ! ( 'title' in settings ) || settings.title === '' ) {\n\t\twindow.console.error(\n\t\t\t'The format \"' + settings.name + '\" must have a title.'\n\t\t);\n\t\treturn;\n\t}\n\n\tif ( 'keywords' in settings && settings.keywords.length > 3 ) {\n\t\twindow.console.error(\n\t\t\t'The format \"' + settings.name + '\" can have a maximum of 3 keywords.'\n\t\t);\n\t\treturn;\n\t}\n\n\tif ( typeof settings.title !== 'string' ) {\n\t\twindow.console.error(\n\t\t\t'Format titles must be strings.'\n\t\t);\n\t\treturn;\n\t}\n\n\tdispatch( 'core/rich-text' ).addFormatTypes( settings );\n\n\tif (\n\t\tsettings.__experimentalCreatePrepareEditableTree &&\n\t\tsettings.__experimentalGetPropsForEditableTreePreparation\n\t) {\n\t\taddFilter( 'experimentalRichText', name, ( OriginalComponent ) => {\n\t\t\treturn withSelect( ( sel, { clientId, identifier } ) => ( {\n\t\t\t\t[ `format_${ name }` ]: settings.__experimentalGetPropsForEditableTreePreparation(\n\t\t\t\t\tsel,\n\t\t\t\t\t{\n\t\t\t\t\t\trichTextIdentifier: identifier,\n\t\t\t\t\t\tblockClientId: clientId,\n\t\t\t\t\t}\n\t\t\t\t),\n\t\t\t} ) )( ( props ) => (\n\t\t\t\t<OriginalComponent\n\t\t\t\t\t{ ...props }\n\t\t\t\t\tprepareEditableTree={ [\n\t\t\t\t\t\t...( props.prepareEditableTree || [] ),\n\t\t\t\t\t\tsettings.__experimentalCreatePrepareEditableTree( props[ `format_${ name }` ], \t{\n\t\t\t\t\t\t\trichTextIdentifier: props.identifier,\n\t\t\t\t\t\t\tblockClientId: props.clientId,\n\t\t\t\t\t\t} ),\n\t\t\t\t\t] }\n\t\t\t\t/>\n\t\t\t) );\n\t\t} );\n\t}\n\n\treturn settings;\n}\n"]}